var documenterSearchIndex = {"docs":
[{"location":"bars.html#Bar-Plots","page":"Bar Plots","title":"Bar Plots","text":"","category":"section"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"DocTestSetup = quote\n  using SomeGraphs\n  using PlotlyDocumenter\nend","category":"page"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"SomeGraphs.Bars\nSomeGraphs.Bars.BarsGraph\nSomeGraphs.Bars.bars_graph\nSomeGraphs.Bars.BarsGraphData\nSomeGraphs.Bars.BarsGraphConfiguration","category":"page"},{"location":"bars.html#SomeGraphs.Bars","page":"Bar Plots","title":"SomeGraphs.Bars","text":"Graphs for showing bars.\n\n\n\n\n\n","category":"module"},{"location":"bars.html#SomeGraphs.Bars.BarsGraph","page":"Bar Plots","title":"SomeGraphs.Bars.BarsGraph","text":"A graph showing a single series of bars. See BarsGraphData and BarsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"bars.html#SomeGraphs.Bars.bars_graph","page":"Bar Plots","title":"SomeGraphs.Bars.bars_graph","text":"function line_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    bar_axis_title::Maybe{AbstractString} = nothing,\n    value_axis_title::Maybe{AbstractString} = nothing,\n    bars_values::AbstractVector{<:Real} = Float32[],\n    bars_names::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    bars_colors::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    bars_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    value_bands::BandsData = BandsData()]\n)::BarsGraph\n\nCreate a BarsGraph by initializing only the BarsGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"bars.html#SomeGraphs.Bars.BarsGraphData","page":"Bar Plots","title":"SomeGraphs.Bars.BarsGraphData","text":"@kwdef mutable struct BarsGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    bar_axis_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    bars_values::AbstractVector{<:Real} = Float32[]\n    bars_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    value_bands::BandsData = BandsData()\nend\n\nThe data for a graph of a single series of bars.\n\nBy default, all the titles are empty. You can specify the overall figure_title as well as the bars_axis_title and value_axis_title for the axes, , and a name for each bar in bars_names. You can specify a color for each bar in bars_colors.\n\n\n\n\n\n","category":"type"},{"location":"bars.html#SomeGraphs.Bars.BarsGraphConfiguration","page":"Bar Plots","title":"SomeGraphs.Bars.BarsGraphConfiguration","text":"@kwdef mutable struct BarsGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    value_bands::BandsConfiguration = BandsConfiguration()\n    values_orientation::ValuesOrientation = VerticalValues\n    bars_color::Maybe{AbstractString} = nothing\n    bars_gap::Real = 0.05,\nend\n\nConfigure a graph for showing a single series of bars.\n\nBy default the values are the y axis (VerticalValues). You can flip the axes using the values_orientation. You can specify bands for this axis using value_bands. The bars_gap is the fraction of white space between bars (0 for no gap, must be less than 1). The bars_colors is used to control the color of the bars (if not specified, chosen automatically by Plotly), in combination with the data bar colors (if any).\n\n\n\n\n\n","category":"type"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"Examples:","category":"page"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"using SomeGraphs\ngraph = bars_graph(; bars_values = collect(0:10) .* 10)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"SomeGraphs.Bars.SeriesBarsGraph\nSomeGraphs.Bars.series_bars_graph\nSomeGraphs.Bars.SeriesBarsGraphData\nSomeGraphs.Bars.SeriesBarsGraphConfiguration","category":"page"},{"location":"bars.html#SomeGraphs.Bars.SeriesBarsGraph","page":"Bar Plots","title":"SomeGraphs.Bars.SeriesBarsGraph","text":"A graph showing multiple series of bars. See SeriesBarsGraphData and SeriesBarsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"bars.html#SomeGraphs.Bars.series_bars_graph","page":"Bar Plots","title":"SomeGraphs.Bars.series_bars_graph","text":"function series_bars_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    bar_axis_title::Maybe{AbstractString} = nothing,\n    value_axis_title::Maybe{AbstractString} = nothing,\n    series_bars_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Vector{Float32}}(),\n    bars_names::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    bars_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    series_names::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    series_colors::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    series_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing]\n)::SeriesBarsGraph\n\nCreate a SeriesBarsGraph by initializing only the SeriesBarsGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"bars.html#SomeGraphs.Bars.SeriesBarsGraphData","page":"Bar Plots","title":"SomeGraphs.Bars.SeriesBarsGraphData","text":"@kwdef mutable struct SeriesBarsGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    bar_axis_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    series_bars_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Vector{Float32}}()\n    bars_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    series_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    series_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    series_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\nend\n\nThe data for a graph of multiple series of bars.\n\nAll the vectors in the series_bars_values must have the same length (the number of bars). The number of entries in bars_names and/or bars_hovers must be the same. The number of entries in series_names, series_colors and/or series_hovers must be the number of series (the number of vectors in series_bars_values).\n\nAll the bars of each series have the same color. If the series_names are specified, then they are used in a legend (or, if using series_gap, as the separate axes titles).\n\n\n\n\n\n","category":"type"},{"location":"bars.html#SomeGraphs.Bars.SeriesBarsGraphConfiguration","page":"Bar Plots","title":"SomeGraphs.Bars.SeriesBarsGraphConfiguration","text":"@kwdef mutable struct SeriesBarsGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    values_orientation::ValuesOrientation = VerticalValues\n    bars_gap::Maybe{Real} = nothing\n    series_gap::Maybe{Real} = nothing\n    stacking::Maybe{Stacking} = nothing\nend\n\nConfigure a graph for showing multiple series of bars.\n\nThis expands on BarsGraphConfiguration by adding optional stacking for stacking the bars of the different series on top of each other. Alternatively, specifying a series_gap will plot each series in its own separate sub-graph. The series_gap is specified as a fraction of the used graph size. If zero the graphs will be adjacent, if 1 then the gaps will be the same size as the graphs. If neither is specified, then the bars will be shown in groups (adjacent to each other) with the bars_gap between the groups.\n\n\n\n\n\n","category":"type"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"Examples:","category":"page"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"using SomeGraphs\ngraph = series_bars_graph(; series_bars_values = [collect(0:10) .* 5, collect(0:10) .^ 2])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"bars.html#Index","page":"Bar Plots","title":"Index","text":"","category":"section"},{"location":"bars.html","page":"Bar Plots","title":"Bar Plots","text":"Pages = [\"bars.md\"]","category":"page"},{"location":"common.html#Common","page":"Common","title":"Common","text":"","category":"section"},{"location":"common.html","page":"Common","title":"Common","text":"DocTestSetup = quote\n  using SomeGraphs\n  using PlotlyDocumenter\nend","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common\nSomeGraphs.Common.Graph\nSomeGraphs.Common.AbstractGraphConfiguration\nSomeGraphs.Common.AbstractGraphData\nSomeGraphs.Common.PlotlyFigure\nSomeGraphs.Common.save_graph\nSomeGraphs.Common.FigureConfiguration\nSomeGraphs.Common.Stacking","category":"page"},{"location":"common.html#SomeGraphs.Common","page":"Common","title":"SomeGraphs.Common","text":"Common data types and utilities for defining specific graph types.\n\n\n\n\n\n","category":"module"},{"location":"common.html#SomeGraphs.Common.Graph","page":"Common","title":"SomeGraphs.Common.Graph","text":"The type of a figure we can display. This is a combination of some AbstractGraphData and AbstractGraphConfiguration. Accessing the .figure property of the graph will return it as a PlotlyFigure, which can be displayed in interactive environments (Julia REPL and/or Jupyter notebooks).\n\nnote: Note\nYou should call save_graph to save the graph to a file, instead of calling savefig on the .figure, because the latter does't obey the graph size, because Plotly.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.AbstractGraphConfiguration","page":"Common","title":"SomeGraphs.Common.AbstractGraphConfiguration","text":"A configuration of a Graph specifies how to display the data while being (as much as possible) independent of the data itself. That is, it should be possible to apply the same configuration to multiple sets of data to generate multiple similar graphs. In some cases (e.g., colors) you can specify a default in the configuration and override it for specific entities in the data.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.AbstractGraphData","page":"Common","title":"SomeGraphs.Common.AbstractGraphData","text":"Some data of a Graph specifies what to display the data while being (as much as possible) independent of how to display it. That is, it should be possible to apply multiple sets of data to the same configuration to to generate multiple similar graphs. In some cases (e.g., colors) you can specify a default in the configuration and override it for specific entities in the data.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.PlotlyFigure","page":"Common","title":"SomeGraphs.Common.PlotlyFigure","text":"The type of a rendered graph which Julia knows how to display.\n\nA plotly figure contains everything needed to display an interactive graph (or generate a static one on disk). It can also be converted to a JSON string for handing it over to a different programming language (e.g., to be used to display the interactive graph in a Python Jupyter notebook, given an appropriate wrapper code).\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.save_graph","page":"Common","title":"SomeGraphs.Common.save_graph","text":"save_graph(graph::Graph, output_file::AbstractString)::Nothing\n\nSave the graph to a file. Unlike the Plotly savefig function, this function will actually obey the width and height parameters specified in the graph's configuration. The format is deduced from the suffix of the file name.\n\n\n\n\n\n","category":"function"},{"location":"common.html#SomeGraphs.Common.FigureConfiguration","page":"Common","title":"SomeGraphs.Common.FigureConfiguration","text":"@kwdef mutable struct FigureConfiguration <: Validated\n    margins::MarginsConfiguration = MarginsConfiguration()\n    width::Maybe{Int} = nothing\n    height::Maybe{Int} = nothing\n    grid_color::AbstractString = \"lightgrey\"\n    background_color::AbstractString = \"white\"\n    paper_color::AbstractString = \"white\"\n    color_scale_offsets::AbstractVector{<:Real} = [1.2, 1.4]\nend\n\nGeneric configuration that applies to the whole figure. Each complete AbstractGraphConfiguration contains a figure field of this type.\n\nThe optional width and height are in pixels, that is, 1/96 of an inch. The margins are specified in the same units.\n\nYou can also manually change the background_color (inside the graph's area) and paper_color (outside the graph's area, that is, the margins). the axes.\n\nIf a graph has both a legend and a color scale, or multiple color scales, then by default, Plotly in its infinite wisdom will happily place them all on top of each other. We therefore need to tell it how to position each and every color scale (except the 1st one if there's no legend) by specifying an explicit offset.\n\nThese color_scale_offsets are specified in what Plotly calls \"paper coordinates\" which are singularly unsuitable for this purpose, as they are in a scale where 0 to 1 is the plot area and therefore dependent not only on the width of the preceding legend and/or color scales (which is bad by itself), but also on the overall size of the graph (so scaling an interactive graph will definitely misbehave). We provide a vector of hopefully reasonable default offsets here. For optimal results you will need to manually tweak these to match your specific graph. In 21st century, when \"AI\" is a thing. Sigh.\n\nWe only provide two offsets here, because plotly in its infinite wisdom is incapable of displaying more than two color scales in a single graph. That is, you are restricted to at most two ColorsConfiguration that use continuous colors and specify show_legend.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.Stacking","page":"Common","title":"SomeGraphs.Common.Stacking","text":"If stacking elements, how to do so:\n\nStackValues just adds the raw values on top of each other.\n\nStackFractions normalizes the values so their sum is 1. This can be combined with setting the percent field of the relevant AxisConfiguration to display percents.\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Reduced size:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.width = 300\ngraph.configuration.figure.height = 300\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Change colors:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.background_color = \"lightyellow\"\ngraph.configuration.figure.paper_color = \"lightgrey\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.MarginsConfiguration","category":"page"},{"location":"common.html#SomeGraphs.Common.MarginsConfiguration","page":"Common","title":"SomeGraphs.Common.MarginsConfiguration","text":"@kwdef mutable struct MarginsConfiguration <: Validated\n    left::Int = 50\n    bottom::Int = 50\n    right::Int = 50\n    top::Int = 50\nend\n\nConfigure the margins of the graph. Sizes are in pixels (1/96th of an inch). Plotly is uncapable of automatically adjusting the margins to adapt to tick labels, so you may have to tweak this manually to avoid clipping or reduce wasted white space. In the 21st century. Sigh.\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Increased margins:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.margins.left = 100\ngraph.configuration.figure.margins.right = 200\ngraph.configuration.figure.margins.top = 150\ngraph.configuration.figure.margins.bottom = 250\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.AxisConfiguration","category":"page"},{"location":"common.html#SomeGraphs.Common.AxisConfiguration","page":"Common","title":"SomeGraphs.Common.AxisConfiguration","text":"@kwdef mutable struct AxisConfiguration <: Validated\n    minimum::Maybe{Real} = nothing\n    maximum::Maybe{Real} = nothing\n    log_scale::Maybe{LogScale} = nothing\n    log_regularization::Real = 0\n    percent::Bool = false\n    show_ticks::Bool = true\n    show_grid::Bool = true\n    grid_color::AbstractString = \"lightgrey\"\nend\n\nGeneric configuration for a graph axis. Everything is optional; by default, the minimum and maximum are computed automatically from the data.\n\nIf log_scale is specified, then the log_regularization is added to the coordinate to avoid zero values, and the axis is shown according to the LogScale. Otherwise, log_regularization must be 0.\n\nIf percent is set, then the values are multiplied by 100 and a % suffix is added to the tick labels.\n\nThe show_ticks and/or show_grid can be disabled for a cleaner (though less informative) graph appearance. By default the grid lines are shown in lightgrey.\n\nThe minimum/maximum, data values, color palette values etc. are all in the original scale. That is, you should be able to control log scale and/or percent scaling without changing anything else.\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Disable ticks:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.show_ticks = false\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Disable grid:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.show_grid = false\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Override grid color:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.grid_color = \"red\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Override range:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.minimum = 1\ngraph.configuration.value_axis.maximum = 4\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Percent:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.percent = 1\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.LogScale","category":"page"},{"location":"common.html#SomeGraphs.Common.LogScale","page":"Common","title":"SomeGraphs.Common.LogScale","text":"Supported log scales (when log scaling is enabled):\n\nLog10Scale converts values to their log (base 10).\nLog2Scale converts values to their log (base 2).\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Log 2:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.log_scale = Log2Scale\ngraph.configuration.value_axis.log_regularization = 1\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Log 10:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.log_scale = Log10Scale\ngraph.configuration.value_axis.log_regularization = 1e-5\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.SizesConfiguration\nSomeGraphs.Common.LineConfiguration\nSomeGraphs.Common.LineStyle\nSomeGraphs.Common.ValuesOrientation\nSomeGraphs.Common.BandsConfiguration\nSomeGraphs.Common.BandConfiguration\nSomeGraphs.Common.BandsData\nSomeGraphs.Common.ColorsConfiguration\nSomeGraphs.Common.ContinuousColors\nSomeGraphs.Common.CategoricalColors\nSomeGraphs.Common.NAMED_COLOR_SCALES\nSomeGraphs.Common.COLOR_SCALES_LOCK\nSomeGraphs.Common.SubGraph","category":"page"},{"location":"common.html#SomeGraphs.Common.SizesConfiguration","page":"Common","title":"SomeGraphs.Common.SizesConfiguration","text":"@kwdef mutable struct SizesConfiguration <: Validated\n    fixed::Maybe{Real} = nothing\n    minimum::Maybe{Real} = nothing\n    maximum::Maybe{Real} = nothing\n    log_scale::Bool = false\n    log_regularization::Real = 0\n    smallest::Real = 6\n    span::Real = 12\nend\n\nConfigure how to map sizes data to a size in pixels (1/96th of an inch). If fixed is specified, it is the size to be used, and none of the other fields should be set (and no sizes data may be specified). Otherwise, sizes data must be specified. The minimal size data value (or any values at most the specified minimum) is mapped to the smallest size in pixels, and the maximum size data value (or any values at least the specified maximum) is mapped to a size with an additional span in pixels. If log_scale, then we use the log of the data values (and of the specified minimum and/or maximum, if any), adding the log_regularization to avoid a log of zero or negative values.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.LineConfiguration","page":"Common","title":"SomeGraphs.Common.LineConfiguration","text":"@kwdef mutable struct LineConfiguration <: Validated\n    width::Maybe{Real} = nothing\n    style::Maybe{LineStyle} = SolidLine\n    is_filled::Bool = false\n    color::Maybe{AbstractString} = nothing\nend\n\nConfigure a line in a graph.\n\nIf style is nothing no line is drawn. If is_filled then the region defined by the line (below it in a lines graph) is filled. A line with no style and no filled is not drawn but can still be used to define a region (e.g., for a BandsConfiguration).\n\nBy default, the color is chosen automatically.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.LineStyle","page":"Common","title":"SomeGraphs.Common.LineStyle","text":"Styles of drawing a line\n\nSolidLine draws a solid line (the default).\nDashLine draws a dashed line.\nDotLine draws a dotted line.\nDashDotLine draws a dash-dotted line.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.ValuesOrientation","page":"Common","title":"SomeGraphs.Common.ValuesOrientation","text":"The orientation of the values axis in a distribution(s) or bars graph:\n\nHorizontalValues - The values are the X axis\n\nVerticalValues - The values are the Y axis (the default).\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.BandsConfiguration","page":"Common","title":"SomeGraphs.Common.BandsConfiguration","text":"@kwdef mutable struct BandsConfiguration <: Validated\n    low::BandConfiguration = BandConfiguration(is_dashed = true)\n    middle::BandConfiguration = BandConfiguration()\n    high::BandConfiguration = BandConfiguration(is_dashed = true)\nend\n\nConfigure the partition of the graph up to three band regions. The low and high bands are for the \"outer\" regions (so their lines are at their border, dashed by default) and the middle band is for the \"inner\" region between them (so its line is inside it, solid by default).\n\nIf show_legend, then a legend showing the bands will be shown.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.BandConfiguration","page":"Common","title":"SomeGraphs.Common.BandConfiguration","text":"@kwdef mutable struct BandConfiguration <: Validated\n    offset::Maybe{Real} = nothing\n    line::LineConfiguration = LineConfiguration()\nend\n\nConfigure a region of the graph defined by some band of values.\n\nThe offset specifies the band's defining line position. We allow up to three bands in a complete BandsConfiguration. A band exists only if its offset is specified, in which case the line specifies how to render its defining line. The low and high bands are defined the region below and above their defining line's offset. If both are defined, the middle band offset defines the center line of the band; the band can still be filled even if this offset is not specified.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.BandsData","page":"Common","title":"SomeGraphs.Common.BandsData","text":"@kwdef mutable struct BandsData\n    low_offset::Maybe{Real} = nothing\n    middle_offset::Maybe{Real} = nothing\n    high_offset::Maybe{Real} = nothing\nend\n\nSpecify data for bands.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.ColorsConfiguration","page":"Common","title":"SomeGraphs.Common.ColorsConfiguration","text":"@kwdef mutable struct ColorsConfiguration <: Validated\n    fixed::Maybe{AbstractString} = nothing\n    palette::Maybe{Union{AbstractString, ContinuousColors, CategoricalColors}} = nothing\n    axis::AxisConfiguration = AxisConfiguration()\n    show_legend::Bool = false\nend\n\nConfigure how to color some data. Supported combinations of configuration and data are:\n\nfixed palette colors data axis show_legend Behavior\ncolor name nothing nothing Restricted(A) false Named fixed (1)\nnothing nothing nothing Restricted(A) false Auto fixed (2)\nnothing nothing str[] Restricted(A) false Named data (3)\nnothing nothing num[] Any Any Auto scale (4)\nnothing palette name num[] Any Any Named scale (5)\nnothing (value::num, color::str)[] num[] Any Any Manual scale (6)\nnothing Dict{value::str => color::str} str[] Restricted(A) Any Categorical (7)\n\nAny other combination of configuration is not allowed.\n\nRestricted Axis: The axis can't specify log_scale, percent, minimum, maximum as they make no sense in this case.\n\nNamed fixed (1): All the data entities will be given the same fixed color.\n\nAuto fixed (2): All the data entities will be given the same color, chosen automatically by Plotly.\n\nNamed data (3): The colors data contains explicit color names. An empty color name will prevent the matching data from being plotted. If the fixed color is specified, it is ignored.\n\nAuto scale (4): The colors data (transformed by the axis) will be shown in a color scale chosen by Plotly.\n\nNames scale (5): The colors data (transformed by the axis) will be shown using the named standard Plotly color scale (see NAMED_COLOR_SCALES).\n\nManual scale (6): The colors data (transformed by the axis) will be shown using the specified palette (whose values will also be transformed by the axis). The values must be in non-decreasing order, and the overall range of values must not be empty.\n\nCategorical (7): The colors data contains valid value keys of the categorical colors dictionary. An empty color name in the dictionary will prevent the matching data from being plotted.\n\nIf show_legend is specified, categorical colors (case 7 above) will be shown in the legend; numerical colors will be shown in a color scale. Plotly is dumb when it comes to positioning color scales next to a legend (or next to each other); see the color_scale_offsets vector of FigureConfiguration for details.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.ContinuousColors","page":"Common","title":"SomeGraphs.Common.ContinuousColors","text":"A continuous colors palette, mapping numeric values to colors. We also allow specifying tuples instead of pairs to make it easy to invoke the API from other languages such as Python which do not have the concept of a Pair. The legend_title is only used if show_legend is set in the configuration.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.CategoricalColors","page":"Common","title":"SomeGraphs.Common.CategoricalColors","text":"A categorical colors palette, mapping string values to colors. An empty string color means the entity will not be shown (as if it was masked or never included in the data).\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.NAMED_COLOR_SCALES","page":"Common","title":"SomeGraphs.Common.NAMED_COLOR_SCALES","text":"Builtin color scales from Plotly, both linear: Blackbody, Bluered, Blues, Cividis, Earth, Electric, Greens, Greys, Hot, Jet, Picnic, Portland, Rainbow, RdBu, Reds, Viridis, YlGnBu, YlOrRd and cyclical: Twilight, IceFire, Edge, Phase, HSV, mrybm, mygbm.\n\nnote: Note\nYou would think we could just give the builtin color scale names to plotly, but it turns out that \"builtin\" in Python plotly doesn't mean \"builtin\" in JavaScript plotly, because \"reasons\". We therefore have to copy their definition here. An upside of having this dictionary is that you are free to insert additional named scale into and gain the convenience of refering to them by name (e.g., for coloring heatmap annotations).\n\nA _r suffix specifies reversing the order of the scale.\n\nYou can also append a final _z:<value_fraction>:<color_fraction> suffix to the name. This will map values in the bottom 0..value_fraction of the range to white, and map the rest of the values to the top color_fraction..1 range of the scale. For example, Blues_z:0.3:0.2 will color the bottom 30% of the values in white, and color the top 70% of the values to the top 80% of the Blues scale.\n\nA _c:<value_fraction>:<color_fraction> works similarly to the _z suffix, except that the fractions are centered on 0.5 (the middle) of the values and color ranges. This is meant to be applied when the values range is +/-Diff, and the scale has white in the middle. For example RdBu_c:0.3:0.2 will color the 30% of the values near the 0 middle in white, and color the rest of the values using the top and bottom 40% of the RdBu scale.\n\nAn _o:<value_fraction>:<color> suffix maps the scale to the range 0..1-value_fraction, and all the values above this to the color, to denote overflow (too high) values. For example, Blues_o:0.01:magenta will color all the values in the bottom 99% of the values range to Blues, and the top 1% of the range to magenta. A _u suffix works similarly but applies to the bottom range of the values.\n\nYou can combine multiple suffixes together, for example Reds_z:0.2:0.2_o:0.99:magenta or RdBu_r_c:0.2:0.2_o:0.01:magenta_u:0.01:darkgreen.\n\nPalettes with suffixes (including _r) are computed on the fly and cached for future use.\n\nnote: Note\nThe implementation of the suffixes uses 1e-6 as a color difference \"too small to matter\". Don't use fractions this small in the prefixes or you will have a bad day.\n\nnote: Note\nAlways hold the COLOR_SCALES_LOCK when manually accessing the NAMED_COLOR_SCALES, otherwise you will regret it at some point.\n\n\n\n\n\n","category":"constant"},{"location":"common.html#SomeGraphs.Common.COLOR_SCALES_LOCK","page":"Common","title":"SomeGraphs.Common.COLOR_SCALES_LOCK","text":"A global lock to use when accessing the NAMED_COLOR_SCALES. Always hold the COLOR_SCALES_LOCK when manually accessing the NAMED_COLOR_SCALES, otherwise you will regret it at some point.\n\n\n\n\n\n","category":"constant"},{"location":"common.html#SomeGraphs.Common.SubGraph","page":"Common","title":"SomeGraphs.Common.SubGraph","text":"@kwdef struct SubGraph\n    index::Integer\n    gap::Maybe{AbstractFloat}\nend\n\nIdentify one sub-graph out of a set of n_graphs adjacent graphs. If the index is 1, this is the 1st sub-graph (used top initialize some values such as the legend group title). If gap is nothing then the sub-graphs are plotted on top of each other, which affects axis parameters; otherwise, the sub-graphs are plotted with this gap, which affects layout parameters.\n\n\n\n\n\n","category":"type"},{"location":"common.html#Index","page":"Common","title":"Index","text":"","category":"section"},{"location":"common.html","page":"Common","title":"Common","text":"Pages = [\"common.md\"]","category":"page"},{"location":"scatters.html#Scatter-Plots","page":"Scatter Plots","title":"Scatter Plots","text":"","category":"section"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"DocTestSetup = quote\n  using SomeGraphs\n  using PlotlyDocumenter\nend","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"SomeGraphs.Scatters\nSomeGraphs.Scatters.PointsGraph\nSomeGraphs.Scatters.points_graph\nSomeGraphs.Scatters.PointsGraphData\nSomeGraphs.Scatters.PointsGraphConfiguration\nSomeGraphs.Scatters.ScattersConfiguration","category":"page"},{"location":"scatters.html#SomeGraphs.Scatters","page":"Scatter Plots","title":"SomeGraphs.Scatters","text":"Graphs for showing scatter points and/or lines.\n\n\n\n\n\n","category":"module"},{"location":"scatters.html#SomeGraphs.Scatters.PointsGraph","page":"Scatter Plots","title":"SomeGraphs.Scatters.PointsGraph","text":"A graph visualizing scattered points (possibly with edges between them). See PointsGraphData and PointsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.points_graph","page":"Scatter Plots","title":"SomeGraphs.Scatters.points_graph","text":"function points_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    x_axis_title::Maybe{AbstractString} = nothing,\n    y_axis_title::Maybe{AbstractString} = nothing,\n    points_colors_title::Maybe{AbstractString} = nothing,\n    borders_colors_title::Maybe{AbstractString} = nothing,\n    edges_colors_title::Maybe{AbstractString} = nothing,\n    points_xs::AbstractVector{<:Real} = Float32[],\n    points_ys::AbstractVector{<:Real} = Float32[],\n    points_sizes::Maybe{AbstractVector{<:Real}} = nothing,\n    points_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing,\n    points_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    points_mask::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing,\n    borders_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing,\n    borders_sizes::Maybe{AbstractVector{<:Real}} = nothing,\n    borders_mask::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing,\n    edges_points::Maybe{AbstractVector{<:Tuple{Integer, Integer}}} = nothing,\n    edges_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing,\n    edges_sizes::Maybe{AbstractVector{<:Real}} = nothing,\n    edges_styles::Maybe{AbstractVector{LineStyle}} = nothing,\n    edges_mask::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing,\n    vertical_bands::BandsData = BandsData(),\n    horizontal_bands::BandsData = BandsData(),\n    diagonal_bands::BandsData = BandsData()]\n)::PointsGraph\n\nCreate a PointsGraph by initializing only the PointsGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"scatters.html#SomeGraphs.Scatters.PointsGraphData","page":"Scatter Plots","title":"SomeGraphs.Scatters.PointsGraphData","text":"@kwdef mutable struct PointsGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    points_colors_title::Maybe{AbstractString} = nothing\n    borders_colors_title::Maybe{AbstractString} = nothing\n    edges_colors_title::Maybe{AbstractString} = nothing\n    points_xs::AbstractVector{<:Real} = Float32[]\n    points_ys::AbstractVector{<:Real} = Float32[]\n    points_sizes::Maybe{AbstractVector{<:Real}} = nothing\n    points_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing\n    points_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    points_mask::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing,\n    borders_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing\n    borders_sizes::Maybe{AbstractVector{<:Real}} = nothing\n    borders_mask::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing,\n    edges_points::Maybe{AbstractVector{<:Tuple{Integer, Integer}}} = nothing\n    edges_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing\n    edges_sizes::Maybe{AbstractVector{<:Real}} = nothing\n    edges_styles::Maybe{AbstractVector{LineStyle}} = nothing\n    edges_mask::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing\n    vertical_bands::BandsData = BandsData()\n    horizontal_bands::BandsData = BandsData()\n    diagonal_bands::BandsData = BandsData()\nend\n\nThe data for a scatter graph of points.\n\nBy default, all the titles are empty. You can specify the overall figure_title as well as the x_axis_title and y_axis_title for the axes, and the points_colors_title and borders_colors_title for the legends.\n\nThe points_xs and points_ys vectors must be of the same size. If specified, the points_colors, points_sizes points_hovers and/or points_mask vectors must also be of the same size. The points_colors can be explicit color names if no palette is specified in the configuration; otherwise, they are either numeric values or category names depending on the type of palette specified. Sizes are the diameter in pixels (1/96th of an inch). Hovers are only shown in interactive graphs (or when saving an HTML file).\n\nThe borders_colors, borders_sizes and/or borders_mask vectors can be used to provide additional data per point. The border size is in addition to the point size.\n\nIt is possible to draw straight edges_points between specific point pairs. In this case the edges of the PointsGraphConfiguration will be used, and the edges_colors, edges_sizes (widths) and edges_styles will override it per edge.\n\nThe points_mask, borders_mask and edges_mask allow disabling an arbitrary subset of the points, borders and/or edges. This is often more convenient than excluding the data from the arrays. This is also useful for defining points which are only used to draw edges between them and aren't drawn as actual points. The properties of excluded entities, other than their coordinates, are ignored (e.g., the points_colors of points with a zero points_mask value need not be valid color names).\n\nThe points_colors_title, borders_colors_title and edges_colors_title are only used if show_legend is set for the relevant color configurations. You can't specify show_legend if the colors data contains explicit color names. palette.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.PointsGraphConfiguration","page":"Scatter Plots","title":"SomeGraphs.Scatters.PointsGraphConfiguration","text":"@kwdef mutable struct PointsGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    x_axis::AxisConfiguration = AxisConfiguration()\n    y_axis::AxisConfiguration = AxisConfiguration()\n    points::ScattersConfiguration = ScattersConfiguration()\n    borders::ScattersConfiguration = ScattersConfiguration()\n    edges::ScattersConfiguration = ScattersConfiguration(sizes = SizesConfiguration(smallest = 2))\n    edges_over_points::Bool = true\n    vertical_bands::BandsConfiguration = BandsConfiguration()\n    horizontal_bands::BandsConfiguration = BandsConfiguration()\n    diagonal_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing a scatter of points and/or edges.\n\nIf edges_over_points is set, the edges will be plotted above the points; otherwise, the points will be plotted above the edges. Edges are plotted using the edges_style unless the styles are specified in the data.\n\nThe borders is used if the PointsGraphData contains either the borders_colors and/or borders_sizes. This allows displaying some additional data per point.\n\nUsing the vertical_bands, horizontal_bands and/or diagonal_bands you can partition the graph into regions. The diagonal_bands can only be used if both axes are linear or both axes are in (the same) log scale. They are parallel to the X = Y line. For linear axes, the offset is additive, (Y = X + offset). For log scale axes, the offset is multiplicative (Y = X * offset), and the offset must be positive. This is a rare case where we must break orthogonality between flags, as switching between linear and log scales must be accompanied by patching the diagonal band offsets to match.\n\nnote: Note\nThere is no show_legend here. Instead you probably want to set the show_legend of the points, borders and/or edges. There's no way to create a legend for sizes or edge styles.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.ScattersConfiguration","page":"Scatter Plots","title":"SomeGraphs.Scatters.ScattersConfiguration","text":"@kwdef mutable struct ScattersConfiguration <: Validated\n    colors::ColorsConfiguration = ColorsConfiguration()\n    sizes::SizesConfiguration() = SizesConfiguration()\nend\n\nConfigure points (or borders, which are just larger points drawn under the actual points) or edges in a scatter graph. Point sizes are the diameter of the points. Border sizes are added to the point sizes. Edge sizes are the width of the lines.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Examples:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = points_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Borders:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = points_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\ngraph.configuration.borders.colors.fixed = \"black\"\ngraph.configuration.borders.sizes.fixed = 1\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Edges:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = points_graph(;\n    points_xs = collect(0:10) .* 10,\n    points_ys = collect(0:10) .^ 2,\n    edges_points = [(1, 8), (2, 9), (3, 10), (4, 11)],\n)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Diagonal bands (linear scales):","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = points_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\ngraph.configuration.diagonal_bands.low.offset = -25\ngraph.configuration.diagonal_bands.middle.offset = 0\ngraph.configuration.diagonal_bands.high.offset = +25\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Diagonal bands (log scales):","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = points_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\ngraph.configuration.x_axis.log_scale = Log10Scale\ngraph.configuration.y_axis.log_scale = Log10Scale\ngraph.configuration.x_axis.log_regularization = 1\ngraph.configuration.y_axis.log_regularization = 1\ngraph.configuration.diagonal_bands.low.offset = 1 / 4\ngraph.configuration.diagonal_bands.middle.offset = 1\ngraph.configuration.diagonal_bands.high.offset = 4\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"SomeGraphs.Scatters.LineGraph\nSomeGraphs.Scatters.line_graph\nSomeGraphs.Scatters.LineGraphData\nSomeGraphs.Scatters.LineGraphConfiguration","category":"page"},{"location":"scatters.html#SomeGraphs.Scatters.LineGraph","page":"Scatter Plots","title":"SomeGraphs.Scatters.LineGraph","text":"A graph showing a single line. See LineGraphData and LineGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.line_graph","page":"Scatter Plots","title":"SomeGraphs.Scatters.line_graph","text":"function line_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    x_axis_title::Maybe{AbstractString} = nothing,\n    y_axis_title::Maybe{AbstractString} = nothing,\n    points_xs::AbstractVector{<:Real} = Float32[],\n    points_ys::AbstractVector{<:Real} = Float32[],\n    vertical_bands::BandsData = BandsData(),\n    horizontal_bands::BandsData = BandsData(),\n    diagonal_bands::BandsData = BandsData()]\n)::LineGraph\n\nCreate a LineGraph by initializing only the LineGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"scatters.html#SomeGraphs.Scatters.LineGraphData","page":"Scatter Plots","title":"SomeGraphs.Scatters.LineGraphData","text":"@kwdef mutable struct LineGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    points_xs::AbstractVector{<:Real} = Float32[]\n    points_ys::AbstractVector{<:Real} = Float32[]\n    points_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    vertical_bands::BandsData = BandsData()\n    horizontal_bands::BandsData = BandsData()\n    diagonal_bands::BandsData = BandsData()\nend\n\nThe data for a single line graph.\n\nBy default, all the titles are empty. You can specify the overall figure_title as well as the x_axis_title and y_axis_title for the axes.\n\nThe points_xs and points_ys vectors must be of the same size. If specified, the points_hovers vector must also be of the same size.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.LineGraphConfiguration","page":"Scatter Plots","title":"SomeGraphs.Scatters.LineGraphConfiguration","text":"@kwdef mutable struct LineGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    x_axis::AxisConfiguration = AxisConfiguration()\n    y_axis::AxisConfiguration = AxisConfiguration()\n    line::LineConfiguration = LineConfiguration()\n    show_points::Bool = false\n    points_size::Maybe{Real} = nothing\n    points_color::Maybe{AbstractString} = nothing\n    vertical_bands::BandsConfiguration = BandsConfiguration()\n    horizontal_bands::BandsConfiguration = BandsConfiguration()\n    diagonal_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing a single line.\n\nIf show_points is set, each point is drawn, using the points_size and/or points_color if specified. The bands are similar to PointsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Examples:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = line_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"With points:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = line_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\ngraph.configuration.show_points = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Filled:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = line_graph(; points_xs = collect(0:10) .* 10, points_ys = collect(0:10) .^ 2)\ngraph.configuration.line.is_filled = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"SomeGraphs.Scatters.LinesGraph\nSomeGraphs.Scatters.lines_graph\nSomeGraphs.Scatters.LinesGraphData\nSomeGraphs.Scatters.LinesGraphConfiguration","category":"page"},{"location":"scatters.html#SomeGraphs.Scatters.LinesGraph","page":"Scatter Plots","title":"SomeGraphs.Scatters.LinesGraph","text":"A graph showing multiple lines. See LinesGraphData and LinesGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.lines_graph","page":"Scatter Plots","title":"SomeGraphs.Scatters.lines_graph","text":"function lines_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    x_axis_title::Maybe{AbstractString} = nothing,\n    y_axis_title::Maybe{AbstractString} = nothing,\n    lines_titles::Maybe{AbstractVector{<:AbstractString}} = nothing\n    lines_points_xs::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    lines_points_ys::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    lines_points_sizes::Maybe{<:AbstractVector{<:Real}} = nothing\n    lines_points_colors::Maybe{<:AbstractVector{<:AbstractString}} = nothing\n    lines_widths::Maybe{<:AbstractVector{<:Real}} = nothing\n    lines_colors::Maybe{<:AbstractVector{<:AbstractString}} = nothing\n    lines_styles::Maybe{<:AbstractVector{LineStyle}} = nothing\n    vertical_bands::BandsData = BandsData(),\n    horizontal_bands::BandsData = BandsData(),\n    diagonal_bands::BandsData = BandsData()]\n)::LinesGraph\n\nCreate a LinesGraph by initializing only the LinesGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"scatters.html#SomeGraphs.Scatters.LinesGraphData","page":"Scatter Plots","title":"SomeGraphs.Scatters.LinesGraphData","text":"@kwdef mutable struct LinesGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    points_xs::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    points_ys::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    points_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    vertical_bands::BandsData = BandsData()\n    horizontal_bands::BandsData = BandsData()\n    diagonal_bands::BandsData = BandsData()\nend\n\nThe data for a multi-line graph.\n\nBy default, all the titles are empty. You can specify the overall figure_title as well as the x_axis_title and y_axis_title for the axes.\n\nAll the lines_* vectors must be of the same size (the number of lines), and contain a vector per line. The lines_points_xs and lines_points_ys contain a vector per line; these vectors must all be of the same size for each line (the number of points in that specific line).\n\nThe lines_titles is required if show_legend is specified in the LinesGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html#SomeGraphs.Scatters.LinesGraphConfiguration","page":"Scatter Plots","title":"SomeGraphs.Scatters.LinesGraphConfiguration","text":"@kwdef mutable struct LinesGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    x_axis::AxisConfiguration = AxisConfiguration()\n    y_axis::AxisConfiguration = AxisConfiguration()\n    line::LineConfiguration = LineConfiguration()\n    show_points::Bool = false\n    points_size::Maybe{Real} = nothing\n    points_color::Maybe{AbstractString} = nothing\n    vertical_bands::BandsConfiguration = BandsConfiguration()\n    horizontal_bands::BandsConfiguration = BandsConfiguration()\n    diagonal_bands::BandsConfiguration = BandsConfiguration()\n    show_legend::Bool = false\nend\n\nConfigure a graph for showing multiple lines.\n\nThis is similar to LineGraphConfiguration, with the addition of show_legend. If this is set, then the data must specify the title to use for each line.\n\nIf stacking is specified, we stack the values on top of each other.\n\n\n\n\n\n","category":"type"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Examples:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = lines_graph(; lines_points_xs = [collect(0:10) .* 10, [0, 90]], lines_points_ys = [collect(0:10) .^ 2, [50, 0]])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Filled:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = lines_graph(; lines_points_xs = [collect(0:10) .* 10, [0, 90]], lines_points_ys = [collect(0:10) .^ 2, [50, 0]])\ngraph.configuration.line.is_filled = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Stacked:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = lines_graph(; lines_points_xs = [collect(0:10) .* 10, [0, 90]], lines_points_ys = [collect(0:10) .^ 2, [50, 0]])\ngraph.configuration.line.is_filled = true\ngraph.configuration.stacking = StackValues\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Fractions:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = lines_graph(; lines_points_xs = [collect(0:10) .* 10, [0, 90]], lines_points_ys = [collect(0:10) .^ 2, [50, 0]])\ngraph.configuration.line.is_filled = true\ngraph.configuration.stacking = StackFractions\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Percents:","category":"page"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"using SomeGraphs\ngraph = lines_graph(; lines_points_xs = [collect(0:10) .* 10, [0, 90]], lines_points_ys = [collect(0:10) .^ 2, [50, 0]])\ngraph.configuration.line.is_filled = true\ngraph.configuration.stacking = StackFractions\ngraph.configuration.y_axis.percent = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"scatters.html#Index","page":"Scatter Plots","title":"Index","text":"","category":"section"},{"location":"scatters.html","page":"Scatter Plots","title":"Scatter Plots","text":"Pages = [\"scatters.md\"]","category":"page"},{"location":"distributions.html#Distributions","page":"Distributions","title":"Distributions","text":"","category":"section"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"DocTestSetup = quote\n  using SomeGraphs\n  using PlotlyDocumenter\nend","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions\nSomeGraphs.Distributions.DistributionGraph\nSomeGraphs.Distributions.distribution_graph\nSomeGraphs.Distributions.DistributionGraphData","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions","page":"Distributions","title":"SomeGraphs.Distributions","text":"Graphs for showing probability distributions.\n\n\n\n\n\n","category":"module"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionGraph","page":"Distributions","title":"SomeGraphs.Distributions.DistributionGraph","text":"A graph for visualizing a single distribution. See DistributionGraphData and DistributionGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.distribution_graph","page":"Distributions","title":"SomeGraphs.Distributions.distribution_graph","text":"distribution_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    value_axis_title::Maybe{AbstractString} = nothing,\n    cumulative_axis_title::Maybe{AbstractString} = nothing,\n    distribution_values::AbstractVector{<:Real} = Float32[],\n    distribution_name::Maybe{AbstractString} = nothing],\n)::DistributionGraph\n\nCreate a DistributionGraph by initializing only the DistributionGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionGraphData","page":"Distributions","title":"SomeGraphs.Distributions.DistributionGraphData","text":"@kwdef mutable struct DistributionGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    cumulative_axis_title::Maybe{AbstractString} = nothing\n    distribution_values::AbstractVector{<:Real} = Float32[]\n    distribution_name::Maybe{AbstractString} = nothing\n    distribution_color::Maybe{AbstractString} = nothing\n    value_bands::BandsData = BandsData()\n    cumulative_bands::BandsData = BandsData()\nend\n\nBy default, all the titles are empty. You can specify the overall figure_title as well as the value_axis_title. The optional distribution_name is used as the name of the density axis. You can also specify the distribution_color and/or value_bands offsets here, if they are more of a data than a configuration parameter in the specific graph. This will override whatever is specified in the configuration.\n\nThe cumulative_axis_title and/of cumulative_bands should only be specified if the distribution.style is CumulativeDistribution.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Titles:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.data.figure_title = \"Figure title\"\ngraph.data.value_axis_title = \"Values axis\"\ngraph.data.distribution_name = \"Distribution name\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Color (if it is more of a data than a configuration parameter):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.data.distribution_color = \"red\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionGraphConfiguration\nSomeGraphs.Distributions.DistributionConfiguration","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionGraphConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.DistributionGraphConfiguration","text":"@kwdef mutable struct DistributionGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    distribution::DistributionConfiguration = DistributionConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    value_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing a single distribution. The cumulative_axis and cumulative_bands are only used if the distribution.style is CumulativeDistribution. The offsets of the cumulative_bands are always in fractions (between 0 and 1) regardless of the cumulative_axis.units.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.DistributionConfiguration","text":"@kwdef mutable struct DistributionConfiguration <: Validated\n    values_orientation::ValuesOrientation = HorizontalValues\n    style::DistributionStyle = CurveDistribution\n    show_outliers::Bool = false\n    line::LineConfiguration = LineConfiguration(; is_filled = true)\nend\n\nConfigure the style of the distribution(s) in a graph.\n\nThe values_orientation will determine the overall orientation of the graph.\n\nIf style uses a box, then if show_outliers, also show the extreme (outlier) points.\n\nThe line.color is chosen automatically by default. When showing multiple distributions, you can override it per each one in the DistributionsGraphData. By default, the distribution is filled. Plotly only allows for solid lines for distributions, and always fills histogram plots without any line.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Change orientation:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.values_orientation = VerticalValues\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionStyle","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionStyle","page":"Distributions","title":"SomeGraphs.Distributions.DistributionStyle","text":"Possible styles for visualizing a distribution:\n\nCurveDistribution - a density curve (the default).\n\nViolinDistribution - same as a density curve but mirrored below the values axis.\n\nBoxDistribution - a box with whiskers to show important distribution values.\n\nCurveBoxDistribution - combine a curve and a box.\n\nViolinBoxDistribution - combine a violin and a box.\n\nHistogramDistribution - a histogram of the distribution.\n\n'CumulativeDistribution' - a cumulative distribution (aka \"CDF\"). This one allows for additional configuration options.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Violin:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = ViolinDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Box:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = BoxDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Box with outliers:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = BoxDistribution\ngraph.configuration.distribution.show_outliers = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Curve and Box:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = CurveBoxDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Violin and Box:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = ViolinBoxDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Histogram:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = HistogramDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Color (if it is more of a configuration parameter than data):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.line.color = \"red\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Line width and disable fill:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.line.width = 4\ngraph.configuration.distribution.line.is_filled = false\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Bands (if the offset is more of a configuration parameter than data):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_bands.middle.offset = 2\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.CumulativeUnits\nSomeGraphs.Distributions.CumulativeAxisConfiguration","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.CumulativeUnits","page":"Distributions","title":"SomeGraphs.Distributions.CumulativeUnits","text":"Possible units for the distribution axis of a cumulative distribution:\n\nCumulativeFractions - the axis is the fraction of entries.\n\nCumulativePercents - the axis is the percent of entries.\n\nCumulativeCounts - the axis is the number of entries.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.CumulativeAxisConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.CumulativeAxisConfiguration","text":"@kwdef mutable struct CumulativeAxisConfiguration\n    units::CumulativeUnits = CumulativeFractions\n    descending::Bool = false\n    show_ticks::Bool = true\n    show_grid::Bool = true\n    grid_color::AbstractString = \"lightgrey\"\nend\n\nPossible configurations for the distribution axis of a cumulative distribution, using the specified units. Normally we count the entries up to some value, so the graph is ascending; if descending, we count the entries down to some value, so the graph is descending.\n\nThis intentionally offers only a subset of the fields of AxisConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Cumulative distribution functions are an undervalued tool for showing distributions. They have the advantage that the second axis is in actual units (by default, fractions). This opens up additional configuration options.","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = CumulativeDistribution\ngraph.configuration.distribution.line.is_filled = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Percents:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = CumulativeDistribution\ngraph.configuration.distribution.line.is_filled = true\ngraph.configuration.cumulative_axis.units = CumulativePercents\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Counts:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = CumulativeDistribution\ngraph.configuration.distribution.line.is_filled = true\ngraph.configuration.cumulative_axis.units = CumulativeCounts\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Descending:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = CumulativeDistribution\ngraph.configuration.distribution.line.is_filled = true\ngraph.configuration.cumulative_axis.descending = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionsGraph\nSomeGraphs.Distributions.distributions_graph\nSomeGraphs.Distributions.DistributionsGraphData","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionsGraph","page":"Distributions","title":"SomeGraphs.Distributions.DistributionsGraph","text":"A graph for visualizing multiple distributions. See DistributionsGraphData and DistributionsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.distributions_graph","page":"Distributions","title":"SomeGraphs.Distributions.distributions_graph","text":"distributions_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    value_axis_title::Maybe{AbstractString} = nothing,\n    distributions_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[],\n    distributions_names::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    distributions_colors::Maybe{AbstractVector{<:AbstractString}} = nothing],\n)::DistributionsGraph\n\nCreate a DistributionsGraph by initializing only the DistributionsGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionsGraphData","page":"Distributions","title":"SomeGraphs.Distributions.DistributionsGraphData","text":"@kwdef mutable struct DistributionsGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    distributions_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    distributions_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    distributions_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\nend\n\nThe data for a multiple distributions graph. By default, all the titles are empty. You can specify the overall figure_title as well as the value_axis_title. If specified, the distributions_names and/or the distributions_colors vectors must contain the same number of elements as the number of vectors in the distributions_values.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionsGraphConfiguration","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionsGraphConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.DistributionsGraphConfiguration","text":"@kwdef mutable struct DistributionsGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    distribution::DistributionConfiguration = DistributionConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    distributions_gap::Maybe{Real} = 0.05\nend\n\nConfigure a graph for showing multiple distributions.\n\nThis is similar to DistributionGraphConfiguration, with additions to deal with having multiple distributions.\n\nIf distributions_gap is set to nothing, overlay the distributions on top of each other. Otherwise, the distributions are plotted next to each other, with the distributions_gap specified as a fraction of the used graph size. If zero the graphs will be adjacent, if 1 then the gaps will be the same size as the graphs. The cumulative_axis is only used if the distribution.style is CumulativeDistribution.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Titles:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(;\n    distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]],\n    distributions_names = [\"Foo\", \"Bar\"],\n    figure_title = \"Figure title\",\n    value_axis_title = \"Values title\",\n)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Size of gap between distributions:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\ngraph.configuration.distributions_gap = 1.0\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Overlay the distributions:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\ngraph.configuration.distributions_gap = nothing\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Overlay the distributions with a legend:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(;\n    distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]],\n    distributions_names = [\"Foo\", \"Bar\"],\n)\ngraph.configuration.distributions_gap = nothing\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Colors (if they are part of the data):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(;\n    distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]],\n    distributions_colors = [\"red\", \"green\"],\n)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"You can also apply any of the distribution and/or value axis configuration options; these will apply to all the distributions:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\ngraph.configuration.distribution.values_orientation = VerticalValues\ngraph.configuration.distribution.line.color = \"red\"\ngraph.configuration.distribution.style = BoxDistribution\ngraph.configuration.distribution.show_outliers = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html#Index","page":"Distributions","title":"Index","text":"","category":"section"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Pages = [\"distributions.md\"]","category":"page"},{"location":"utilities.html#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities.html","page":"Utilities","title":"Utilities","text":"SomeGraphs.Utilities\nSomeGraphs.Utilities.Maybe\nSomeGraphs.Utilities.validate_graph\nSomeGraphs.Utilities.graph_to_figure\nSomeGraphs.Utilities.plotly_figure\nSomeGraphs.Utilities.validate_colors\nSomeGraphs.Utilities.fill_color\nSomeGraphs.Utilities.validate_values\nSomeGraphs.Utilities.scale_axis_value\nSomeGraphs.Utilities.scale_axis_values\nSomeGraphs.Utilities.scale_size_values\nSomeGraphs.Utilities.plotly_layout\nSomeGraphs.Utilities.axis_ticks_prefix\nSomeGraphs.Utilities.axis_ticks_suffix\nSomeGraphs.Utilities.set_layout_axis!\nSomeGraphs.Utilities.set_layout_colorscale!\nSomeGraphs.Utilities.plotly_line_dash\nSomeGraphs.Utilities.plotly_sub_graph_axes\nSomeGraphs.Utilities.plotly_sub_graph_domain\nSomeGraphs.Utilities.validate_graph_bands\nSomeGraphs.Utilities.push_horizontal_bands_shapes\nSomeGraphs.Utilities.push_vertical_bands_shapes\nSomeGraphs.Utilities.push_diagonal_bands_shapes\nSomeGraphs.Utilities.MaybeRange\nSomeGraphs.Utilities.Range\nSomeGraphs.Utilities.collect_range!\nSomeGraphs.Utilities.final_scaled_range\nSomeGraphs.Utilities.prefer_data","category":"page"},{"location":"utilities.html#SomeGraphs.Utilities","page":"Utilities","title":"SomeGraphs.Utilities","text":"Utility functions for defining graph types. We do not re-export all symbols from this sub-module to the global MCGraphs namespace. You can safely ignore these unless you are implementing a new graph type.\n\n\n\n\n\n","category":"module"},{"location":"utilities.html#SomeGraphs.Validations.Maybe","page":"Utilities","title":"SomeGraphs.Validations.Maybe","text":"Maybe{T} = Union{T, Nothing}\n\nThe type to use when maybe there is a value, maybe there isn't. This is exactly as if writing the explicit Union with Nothing but is shorter and more readable. This is extremely common.\n\nnote: Note\nThis is replicated from DataAxesFormats to avoid making it a dependency. We do not export it but use it extensively in the type signatures.\n\n\n\n\n\n","category":"type"},{"location":"utilities.html#SomeGraphs.Common.validate_graph","page":"Utilities","title":"SomeGraphs.Common.validate_graph","text":"validate_graph(::Graph)::Maybe{AbstractString}\n\nValidate that the combination of data and configuration in a graph is valid, after validating each one separately. This isn't invoked manually, instead it is called by the overall validate of the graph. It is provided (with a default empty implementation) to allow for type-specific validations.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Common.graph_to_figure","page":"Utilities","title":"SomeGraphs.Common.graph_to_figure","text":"graph_to_figure(graph::Graph)::PlotlyFigure\n\nRender a graph given its data and configuration. Technically this just converts the graph to a PlotlyFigure which Julia knows how display for us, rather than actually display the graph. The implementation depends on the specific graph type.\n\nYou can just write graph.figure instead of graph_to_figure(graph).\n\nnote: Note\nWhen saving a figure to a file, Plotly in its infinite wisdom ignores the graph width and height specified inside the figure, (except for saving HTML file). You should therefore use save_graph rather than call savefig on the result of graph_to_figure.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.plotly_figure","page":"Utilities","title":"SomeGraphs.Utilities.plotly_figure","text":"plotly_figure(trace::GenericTrace, layout::Layout)::PlotlyFigure\nplotly_figure(traces::AbstractVector{<:GenericTrace}, layout::Layout)::PlotlyFigure\n\nWrap a trace or a set of traces with the accompanying layout in a PlotlyFigure.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.validate_colors","page":"Utilities","title":"SomeGraphs.Utilities.validate_colors","text":"validate_colors(\n    colors_data_context::ValidationContext,\n    colors_data::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}},\n    colors_configuration_context::ValidationContext,\n    colors_configuration::ColorsConfiguration,\n    mask::Maybe{Union{AbstractVector{Bool},BitVector}} = nothing,\n)::Nothing\n\nValidate that the colors_data from the colors_data_context is valid and consistent with the colors_configuration from the colors_configuration_context. For example, if the color configuration contains a categorical color mapping, this will validate that all the color names in the data are valid keys of this mapping.\n\nIf a mask is specified, do not validate colors in the data whose matching value in the mask is false.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.fill_color","page":"Utilities","title":"SomeGraphs.Utilities.fill_color","text":"fill_color(line_color::Maybe{AbstractString})::Maybe{AbstractString}\n\nReturn a fill color based on a line_color. The fill color is twice as transparent as the line color.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.validate_values","page":"Utilities","title":"SomeGraphs.Utilities.validate_values","text":"validate_values(\n    values_data_context::ValidationContext,\n    values_data::Maybe{AbstractVector{<:Real}}},\n    axis_configuration_context::ValidationContext,\n    axis_configuration::AxisConfiguration,\n)::Nothing\n\nValidate that the values_data from the values_data_context is valid and consistent with the axis_configuration from the axis_configuration_context. Specifically this ensures that if a log_scale is applied, all the values are positive.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.scale_axis_value","page":"Utilities","title":"SomeGraphs.Utilities.scale_axis_value","text":"scale_axis_value(axis_configuration::AxisConfiguration, value::Real; clamp::Bool = true)::Real\nscale_axis_value(axis_configuration::AxisConfiguration, value::Nothing; clamp::Bool = true)::Nothing\n\nScale a single value according to the axis_configuration. This deals with log scales and percent scaling. By default, clamp the values to a specified explicit range.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.scale_axis_values","page":"Utilities","title":"SomeGraphs.Utilities.scale_axis_values","text":"scale_axis_values(\n    axis_configuration::AxisConfiguration,\n    values::Maybe{AbstractVector{<:Maybe{Real}}};\n    clamp::Bool = true\n)::Maybe{AbstractVector{<:Maybe{Real}}}\n\nScale a vector of values according to the axis_configuration. This deals with log scales and percent scaling. By default, clamp the values to a specified explicit range. If copy we always return a copy of the data (so it can be safely modified further without impacting the original data).\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.scale_size_values","page":"Utilities","title":"SomeGraphs.Utilities.scale_size_values","text":"scale_size_values(\n    sizes_configuration::SizesConfiguration,\n    values::Maybe{AbstractVector{<:Real}},\n)::Maybe{AbstractVector{<:Real}}\n\nScale a vector of values according to sizes_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.plotly_layout","page":"Utilities","title":"SomeGraphs.Utilities.plotly_layout","text":"plotly_layout(\n    figure_configuration::FigureConfiguration;\n    title::Maybe{AbstractString},\n    showlegend::Bool,\n    shapes::AbstractVector{Shape},\n)::Layout\n\nCreate a Plotly Layout object.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.axis_ticks_prefix","page":"Utilities","title":"SomeGraphs.Utilities.axis_ticks_prefix","text":"axis_ticks_prefix(axis_configuration::AxisConfiguration)::Maybe{AbstractString}\n\nReturn the prefix for the ticks of an axis_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.axis_ticks_suffix","page":"Utilities","title":"SomeGraphs.Utilities.axis_ticks_suffix","text":"axis_ticks_suffix(axis_configuration::AxisConfiguration)::Maybe{AbstractString}\n\nReturn the suffix for the ticks of an axis_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.set_layout_axis!","page":"Utilities","title":"SomeGraphs.Utilities.set_layout_axis!","text":"set_layout_axis!(\n    layout::Layout,\n    axis::AbstractString\n    axis_configuration::AxisConfiguration;\n    title::Maybe{AbstractString},\n    range::Range,\n    domain::Maybe{AbstractVector{<:Real}} = nothing,\n)::Nothing\n\nAdd a Plotly axis in a layout using the axis_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.set_layout_colorscale!","page":"Utilities","title":"SomeGraphs.Utilities.set_layout_colorscale!","text":"set_layout_colorscale!(\n    layout::Layout,\n    colorscale::AbstractString,\n    colors_configuration::ColorsConfiguration;\n    offset::Maybe{Real},\n    title::Maybe{AbstractString},\n)::Nothing\n\nSet a colorscale in a Plotly layout, as specified by a colors_configuration. Since Plotly is dumb when it comes to placement of color scales, the offset must be specified manually to avoid overlaps.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.plotly_line_dash","page":"Utilities","title":"SomeGraphs.Utilities.plotly_line_dash","text":"plotly_line_dash(line_style::LineStyle)::Maybe{AbstractString}\n\nReturn the Plotly line_dash for a line_style.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.plotly_sub_graph_axes","page":"Utilities","title":"SomeGraphs.Utilities.plotly_sub_graph_axes","text":"plotly_axes(sub_graph::SubGraph)::Tuple{\n    Maybe{AbstractString},\n    Maybe{AbstractFloat},\n    Maybe{AbstractString},\n    Maybe{AbstractFloat},\n}\n\nReturn the X and Y axes and zero value for a sub-graph.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.plotly_sub_graph_domain","page":"Utilities","title":"SomeGraphs.Utilities.plotly_sub_graph_domain","text":"plotly_sub_graph_domain(sub_graph::SubGraph)::Maybe{AbstractVector{<:AbstractFloat}}\n\nReturn the Plotly \"domain\" for a sub-graph.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.validate_graph_bands","page":"Utilities","title":"SomeGraphs.Utilities.validate_graph_bands","text":"validate_graph_bands(\n    field::AbstractString,\n    bands_configuration::BandsConfiguration,\n    bands_data::BandsData,\n    axis_configuration::Maybe{AxisConfiguration} = nothing,\n)::Nothing\n\nValidate that the bands configuration and data is compatible. Assumes these are specified as the same field in both the graph's data and configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.push_horizontal_bands_shapes","page":"Utilities","title":"SomeGraphs.Utilities.push_horizontal_bands_shapes","text":"push_horizontal_bands_shapes(\n    shapes::AbstractVector{Shape},\n    axis_configuration::AxisConfiguration,\n    scaled_values_range::Range,\n    bands_data::BandsData,\n    bands_configuration::BandsConfiguration,\n    bands_scale::Real = 1,\n)::AbstractVector{<:Shape}\n\nPush shapes for plotting horizontal bands. These shapes need to be placed in the layout and not the traces because Plotly.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.push_vertical_bands_shapes","page":"Utilities","title":"SomeGraphs.Utilities.push_vertical_bands_shapes","text":"push_vertical_bands_shapes(\n    shapes::AbstractVector{Shape},\n    axis_configuration::AxisConfiguration,\n    scaled_values_range::Range,\n    bands_data::BandsData,\n    bands_configuration::BandsConfiguration,\n    bands_scale::Real = 1,\n)::AbstractVector{<:Shape}\n\nPush shapes for plotting vertical bands. These shapes need to be places in the layout and not the traces because Plotly.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.push_diagonal_bands_shapes","page":"Utilities","title":"SomeGraphs.Utilities.push_diagonal_bands_shapes","text":"push_diagonal_bands_shapes(\n    shapes::AbstractVector{Shape},\n    x_axis_configuration::AxisConfiguration,\n    y_axis_configuration::AxisConfiguration,\n    x_scaled_values_range::Range,\n    y_scaled_values_range::Range,\n    bands_data::BandsData,\n    bands_configuration::BandsConfiguration\n)::AbstractVector{<:Shape}\n\nPush shapes for plotting diagonal bands. These shapes need to be placed in the layout and not the traces because Plotly.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.MaybeRange","page":"Utilities","title":"SomeGraphs.Utilities.MaybeRange","text":"@kwdef mutable struct MaybeRange\n    minimum::Maybe{Float32} = nothing\n    maximum::Maybe{Float32} = nothing\nend\n\nA range of values (possibly partially specified).\n\n\n\n\n\n","category":"type"},{"location":"utilities.html#SomeGraphs.Utilities.Range","page":"Utilities","title":"SomeGraphs.Utilities.Range","text":"@kwdef mutable struct Range\n    minimum::Float32\n    maximum::Float32\nend\n\nA range of values (fully specified).\n\n\n\n\n\n","category":"type"},{"location":"utilities.html#SomeGraphs.Utilities.collect_range!","page":"Utilities","title":"SomeGraphs.Utilities.collect_range!","text":"collect_range!(\n    range::MaybeRange,\n    values::AbstractVector{<:Maybe{Real}},\n)::Nothing\n\nExpand the range to cover the `values.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.final_scaled_range","page":"Utilities","title":"SomeGraphs.Utilities.final_scaled_range","text":"final_scaled_range(\n    implicit_scaled_range::Union{Range, MaybeRange},\n    axis_configuration::AxisConfiguration\n)::Range,\n\nCompute the final range for some axis given the implicit_scaled_range computed from the values and the axis_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.prefer_data","page":"Utilities","title":"SomeGraphs.Utilities.prefer_data","text":"prefer_data(data_value::Any, configuration_value::Any)::Any\nprefer_data(data_values::AbstractVector, index::Integer, configuration_value::Any)::Any\n\nReturn a value to use, prefering the data value (which may be in a vector) to the configuration value.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#Index","page":"Utilities","title":"Index","text":"","category":"section"},{"location":"utilities.html","page":"Utilities","title":"Utilities","text":"Pages = [\"utilities.md\"]","category":"page"},{"location":"validations.html#Validations","page":"Validations","title":"Validations","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"SomeGraphs.Validations\nSomeGraphs.Validations.Validated\nSomeGraphs.Validations.ValidationContext\nSomeGraphs.Validations.location\nSomeGraphs.Validations.validate\nSomeGraphs.Validations.validate_in\nSomeGraphs.Validations.validate_field\nSomeGraphs.Validations.validate_is_at_least\nSomeGraphs.Validations.validate_is_above\nSomeGraphs.Validations.validate_is_at_most\nSomeGraphs.Validations.validate_is_below\nSomeGraphs.Validations.validate_is_range\nSomeGraphs.Validations.validate_is_color\nSomeGraphs.Validations.validate_vector_is_not_empty\nSomeGraphs.Validations.validate_vector_length\nSomeGraphs.Validations.validate_vector_entries\nSomeGraphs.Validations.validate_matrix_is_not_empty\nSomeGraphs.Validations.validate_matrix_size\nSomeGraphs.Validations.validate_matrix_entries\nSomeGraphs.Validations.validate_dict_is_not_empty\nSomeGraphs.Validations.validate_dict_entries","category":"page"},{"location":"validations.html#SomeGraphs.Validations","page":"Validations","title":"SomeGraphs.Validations","text":"Validate graph data.\n\nRendering graphs requires two objects: data and configuration. Both objects need to be internally consistent, as does their combination. This is especially relevant for the graph configuration. When creating UI for filling in these objects, we can do limited validation of each field on its own based on its type (e.g. (e.g., ensure that a \"color\" field contains a valid color name). Some restrictions, however, are not easily deduced from the field type, or relate different fields to each other. Replicating all the restrictions in the UI is tedious and error prone.\n\nWe therefore provide a framework here for validating the objects and generate a hopefully informative error message if anything is wrong. This can be used by the UI to validate the data without worrying about the details.\n\n\n\n\n\n","category":"module"},{"location":"validations.html#SomeGraphs.Validations.Validated","page":"Validations","title":"SomeGraphs.Validations.Validated","text":"A common type for objects that support validation, that is, that one can invoke validate on.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.ValidationContext","page":"Validations","title":"SomeGraphs.Validations.ValidationContext","text":"A context (path of field names and/or indices) leading to a validated value. A string indicates access of a data member, an integer indicates accessing a vector or matrix element.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.location","page":"Validations","title":"SomeGraphs.Validations.location","text":"stringify_context(context::ValidationContext)::AbstractString\n\nConvert a ValidationContext to a string for error messages.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate","page":"Validations","title":"SomeGraphs.Validations.validate","text":"validate(context::ValidationContext, value::Validated)::Nothing end\nvalidate(context::ValidationContext, value::Validated, extra::Any)::Nothing end\nvalidate(context::ValidationContext, value::Validated, extra::Any, another::Any)::Nothing end\n\nValidate the value which was accessed via the context, possibly using some extra informative. Will throw ArgumentError if the value isn't valid.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_in","page":"Validations","title":"SomeGraphs.Validations.validate_in","text":"validate_in(validation::Function, context::ValidationContext, where::Union{AbstractString, Integer})::Nothing\n\nInvoke the validation function with the context updated to include some where.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_field","page":"Validations","title":"SomeGraphs.Validations.validate_field","text":"validate_field(context::ValidationContext, field::AbstractString, value::Validated)::Nothing\nvalidate_field(context::ValidationContext, field::AbstractString, value::Validated, extra::Any)::Nothing\nvalidate_field(context::ValidationContext, field::AbstractString, value::Validated, extra::Any, another::Any)::Nothing\n\nValidate the value of a field.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_at_least","page":"Validations","title":"SomeGraphs.Validations.validate_is_at_least","text":"validate_is_at_least(context::ValidationContext, value::Maybe{Real}, minimum::Real)::Nothing\n\nValidate that a value is at least some minimum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_above","page":"Validations","title":"SomeGraphs.Validations.validate_is_above","text":"validate_is_above(context::ValidationContext, value::Maybe{Real}, minimum::Real)::Nothing\n\nValidate that a value is above some minimum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_at_most","page":"Validations","title":"SomeGraphs.Validations.validate_is_at_most","text":"validate_is_at_most(context::ValidationContext, value::Maybe{Real}, maximum::Real)::Nothing\n\nValidate that a value is at most some maximum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_below","page":"Validations","title":"SomeGraphs.Validations.validate_is_below","text":"validate_is_below(context::ValidationContext, value::Maybe{Real}, maximum::Real)::Nothing\n\nValidate that a value is below some maximum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_range","page":"Validations","title":"SomeGraphs.Validations.validate_is_range","text":"validate_is_range(\n    context::ValidationContext,\n    low_where::AbstractString,\n    low_value::Maybe{Real},\n    high_where::AbstractString,\n    high_value::Maybe{Real},\n)::Nothing\n\nValidate that if both low_value and high_value are specified, they define a non-empty range.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_color","page":"Validations","title":"SomeGraphs.Validations.validate_is_color","text":"validate_is_color(context::ValidationContext, color::Maybe{AbstractString})::Nothing\n\nValidate that a color is a valid color name (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_is_not_empty","page":"Validations","title":"SomeGraphs.Validations.validate_vector_is_not_empty","text":"validate_vector_is_not_empty(\n    context::ValidationContext,\n    [field::AbstractString,]\n    vector::AbstractVector\n)::Nothing\n\nValidate that a field containing a vector has at least one entry.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_length","page":"Validations","title":"SomeGraphs.Validations.validate_vector_length","text":"validate_vector_length(\n    context::ValidationContext,\n    field::AbstractString,\n    vector::Maybe{AbstractVector},\n    expected_base::AbstractString,\n    expected_length::Integer\n)::Nothing\n\nValidate that a field containing a vector has (if it is specified) the expected_length of an expected_base field.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_entries","page":"Validations","title":"SomeGraphs.Validations.validate_vector_entries","text":"validate_vector_entries(\n    validation::Function,\n    context::ValidationContext,\n    [field::AbstractString,]\n    vector::Maybe{AbstractVector},\n    [mask::Maybe{Union{AbstractVector{Bool},BitVector}} = nothing]\n)::Nothing\n\nValidate all the entries of a field containing a vector using the validation function. It is given the entry's index, and its value. The context is updated to include the index for the duration of the function.\n\nIf a mask is specified, entries with a false value in the mask will not be validated.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_is_not_empty","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_is_not_empty","text":"validate_matrix_is_not_empty(\n    context::ValidationContext,\n    field::AbstractString,\n    matrix::AbstractMatrix\n)::Nothing\n\nValidate that a field containing a matrix has at least one entry.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_size","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_size","text":"validate_matrix_size(\n    context::ValidationContext,\n    matrix::Maybe{AbstractMatrix},\n    field::AbstractString,\n    expected_size::Tuple{Integer, Integer}\n)::Nothing\n\nValidate that a field containing matrix has (if it is specified) the expected_size of a base_field.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_entries","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_entries","text":"validate_matrix_entries(\n    validation::Function,\n    context::ValidationContext,\n    field::AbstractString,\n    matrix::Maybe{AbstractMatrix}\n)::Nothing\n\nValidate all the entries of a field containing a matrix using the validation function. It is given the entry's row and column indices, and its value. The context is updated to include the indices for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_dict_is_not_empty","page":"Validations","title":"SomeGraphs.Validations.validate_dict_is_not_empty","text":"validate_dict_is_not_empty(\n    context::ValidationContext,\n    [field::AbstractString,]\n    dict::AbstractDict,\n)::Nothing\n\nValidate that a field containing a dict has at least one entry.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_dict_entries","page":"Validations","title":"SomeGraphs.Validations.validate_dict_entries","text":"validate_dict_entries(\n    validation::Function,\n    context::ValidationContext,\n    [field::AbstractString,]\n    dict::Maybe{AbstractDict}\n)::Nothing\n\nValidate all the entries of a field containing a dict using the validation function. It is given the entry's key and value. The context is updated to include the key for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#Index","page":"Validations","title":"Index","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"Pages = [\"validations.md\"]","category":"page"},{"location":"index.html#SomeGraphs","page":"SomeGraphs","title":"SomeGraphs","text":"","category":"section"},{"location":"index.html","page":"SomeGraphs","title":"SomeGraphs","text":"SomeGraphs.SomeGraphs","category":"page"},{"location":"index.html#SomeGraphs.SomeGraphs","page":"SomeGraphs","title":"SomeGraphs.SomeGraphs","text":"Wrappers around Plotly to generate some types of graphs.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Index","page":"SomeGraphs","title":"Index","text":"","category":"section"},{"location":"index.html","page":"SomeGraphs","title":"SomeGraphs","text":"","category":"page"}]
}
