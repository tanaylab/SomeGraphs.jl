var documenterSearchIndex = {"docs":
[{"location":"validations.html#Validations","page":"Validations","title":"Validations","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"SomeGraphs.Validations\nSomeGraphs.Validations.Maybe\nSomeGraphs.Validations.Validated\nSomeGraphs.Validations.ValidationContext\nSomeGraphs.Validations.location\nSomeGraphs.Validations.validate\nSomeGraphs.Validations.validate_is_at_least\nSomeGraphs.Validations.validate_is_above\nSomeGraphs.Validations.validate_is_at_most\nSomeGraphs.Validations.validate_is_below\nSomeGraphs.Validations.validate_is_color\nSomeGraphs.Validations.validate_vector_length\nSomeGraphs.Validations.validate_vector_entries\nSomeGraphs.Validations.validate_matrix_size\nSomeGraphs.Validations.validate_matrix_entries","category":"page"},{"location":"validations.html#SomeGraphs.Validations","page":"Validations","title":"SomeGraphs.Validations","text":"Validate graph data.\n\nRendering graphs requires two objects: data and configuration. Both objects need to be internally consistent, as does their combination. This is especially relevant for the graph configuration. When creating UI for filling in these objects, we can do limited validation of each field on its own based on its type (e.g. (e.g., ensure that a \"color\" field contains a valid color name). Some restrictions, however, are not easily deduced from the field type, or relate different fields to each other. Replicating all the restrictions in the UI is tedious and error prone.\n\nWe therefore provide a framework here for validating the objects and generate a hopefully informative error message if anything is wrong. This can be used by the UI to validate the data without worrying about the details.\n\n\n\n\n\n","category":"module"},{"location":"validations.html#SomeGraphs.Validations.Maybe","page":"Validations","title":"SomeGraphs.Validations.Maybe","text":"Maybe{T} = Union{T, Nothing}\n\nThe type to use when maybe there is a value, maybe there isn't. This is exactly as if writing the explicit Union with Nothing but is shorter and more readable. This is extremely common.\n\nnote: Note\nThis is replicated from DataAxesFormats to avoid making it a dependency. We do not export it but use it extensively in the type signatures.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.Validated","page":"Validations","title":"SomeGraphs.Validations.Validated","text":"A common type for objects that support validation, that is, that one can invoke validate on.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.ValidationContext","page":"Validations","title":"SomeGraphs.Validations.ValidationContext","text":"A context (path of field names and/or indices) leading to a validated value. A string indicates access of a data member, an integer indicates accessing a vector or matrix element.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.location","page":"Validations","title":"SomeGraphs.Validations.location","text":"stringify_context(context::ValidationContext)::AbstractString\n\nConvert a ValidationContext to a string for error messages.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate","page":"Validations","title":"SomeGraphs.Validations.validate","text":"validate(context::ValidationContext, value::Validated)::Nothing end\nvalidate(context::ValidationContext, value::Validated, extra::Any)::Nothing end\n\nValidate the value which was accessed via the context, possibly using some extra informative. Will throw ArgumentError if the value isn't valid.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_at_least","page":"Validations","title":"SomeGraphs.Validations.validate_is_at_least","text":"validate_is_at_least(context::ValidationContext, value::Maybe{Real}, minimum::Real)::Nothing\n\nValidate that a value is at least some minimum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_above","page":"Validations","title":"SomeGraphs.Validations.validate_is_above","text":"validate_is_above(context::ValidationContext, value::Maybe{Real}, minimum::Real)::Nothing\n\nValidate that a value is above some minimum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_at_most","page":"Validations","title":"SomeGraphs.Validations.validate_is_at_most","text":"validate_is_at_most(context::ValidationContext, value::Maybe{Real}, maximum::Real)::Nothing\n\nValidate that a value is at most some maximum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_below","page":"Validations","title":"SomeGraphs.Validations.validate_is_below","text":"validate_is_below(context::ValidationContext, value::Maybe{Real}, maximum::Real)::Nothing\n\nValidate that a value is below some maximum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_color","page":"Validations","title":"SomeGraphs.Validations.validate_is_color","text":"validate_is_color(context::ValidationContext, color::Maybe{AbstractString})::Nothing\n\nValidate that a color is a valid color name (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_length","page":"Validations","title":"SomeGraphs.Validations.validate_vector_length","text":"validate_vector_length(context::ValidationContext, vector::Maybe{AbstractVector}, expected_length::Integer)::Nothing\n\nValidate that a vector has the expected_length (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_entries","page":"Validations","title":"SomeGraphs.Validations.validate_vector_entries","text":"validate_vector_entries(validation::Function, context::ValidationContext, vector::Maybe{AbstractVector})::Nothing\n\nValidate all the entries of a vector using the validation function. It is given the entry's index, and its value. The context is updated to include the index for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_size","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_size","text":"validate_matrix_size(context::ValidationContext, matrix::Maybe{AbstractMatrix}, expected_size::Tuple{Integer, Integer})::Nothing\n\nValidate that a matrix has the expected_size (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_entries","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_entries","text":"validate_matrix_entries(validation::Function, context::ValidationContext, matrix::Maybe{AbstractMatrix})::Nothing\n\nValidate all the entries of a matrix using the validation function. It is given the entry's row and column indices, and its value. The context is updated to include the indices for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#Index","page":"Validations","title":"Index","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"Pages = [\"validations.md\"]","category":"page"},{"location":"index.html#SomeGraphs","page":"SomeGraphs","title":"SomeGraphs","text":"","category":"section"},{"location":"index.html","page":"SomeGraphs","title":"SomeGraphs","text":"SomeGraphs.SomeGraphs","category":"page"},{"location":"index.html#SomeGraphs.SomeGraphs","page":"SomeGraphs","title":"SomeGraphs.SomeGraphs","text":"Wrappers around Plotly to generate some types of graphs.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Index","page":"SomeGraphs","title":"Index","text":"","category":"section"},{"location":"index.html","page":"SomeGraphs","title":"SomeGraphs","text":"","category":"page"}]
}
