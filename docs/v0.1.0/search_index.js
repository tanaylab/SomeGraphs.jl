var documenterSearchIndex = {"docs":
[{"location":"common.html#Common","page":"Common","title":"Common","text":"","category":"section"},{"location":"common.html","page":"Common","title":"Common","text":"DocTestSetup = quote\n  using SomeGraphs\n  using PlotlyDocumenter\nend","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common\nSomeGraphs.Common.Graph\nSomeGraphs.Common.AbstractGraphConfiguration\nSomeGraphs.Common.AbstractGraphData\nSomeGraphs.Common.PlotlyFigure\nSomeGraphs.Common.save_graph\nSomeGraphs.Common.FigureConfiguration","category":"page"},{"location":"common.html#SomeGraphs.Common","page":"Common","title":"SomeGraphs.Common","text":"Common data types and utilities for defining specific graph types.\n\n\n\n\n\n","category":"module"},{"location":"common.html#SomeGraphs.Common.Graph","page":"Common","title":"SomeGraphs.Common.Graph","text":"The type of a figure we can display. This is a combination of some AbstractGraphData and AbstractGraphConfiguration. Accessing the .figure property of the graph will return it as a PlotlyFigure, which can be displayed in interactive environments (Julia REPL and/or Jupyter notebooks).\n\nnote: Note\nYou should call save_graph to save the graph to a file, instead of calling savefig on the .figure, because the latter does't obey the graph size, because Plotly.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.AbstractGraphConfiguration","page":"Common","title":"SomeGraphs.Common.AbstractGraphConfiguration","text":"A configuration of a [Graph] specifies how to display the data while being (as much as possible) independent of the data itself. That is, it should be possible to apply the same configuration to multiple sets of data to generate multiple similar graphs. In some cases (e.g., colors) you can specify a default in the configuration and override it for specific entities in the data.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.AbstractGraphData","page":"Common","title":"SomeGraphs.Common.AbstractGraphData","text":"Some data of a [Graph] specifies what to display the data while being (as much as possible) independent of how to display it. That is, it should be possible to apply multiple sets of data to the same configuration to to generate multiple similar graphs. In some cases (e.g., colors) you can specify a default in the configuration and override it for specific entities in the data.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.PlotlyFigure","page":"Common","title":"SomeGraphs.Common.PlotlyFigure","text":"The type of a rendered graph which Julia knows how to display.\n\nA plotly figure contains everything needed to display an interactive graph (or generate a static one on disk). It can also be converted to a JSON string for handing it over to a different programming language (e.g., to be used to display the interactive graph in a Python Jupyter notebook, given an appropriate wrapper code).\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.save_graph","page":"Common","title":"SomeGraphs.Common.save_graph","text":"save_graph(graph::Graph, output_file::AbstractString)::Nothing\n\nSave the graph to a file. Unlike the Plotly savefig function, this function will actually obey the width and height parameters specified in the graph's configuration. The format is deduced from the suffix of the file name.\n\n\n\n\n\n","category":"function"},{"location":"common.html#SomeGraphs.Common.FigureConfiguration","page":"Common","title":"SomeGraphs.Common.FigureConfiguration","text":"@kwdef mutable struct FigureConfiguration <: Validated\n    margins::MarginsConfiguration = MarginsConfiguration()\n    width::Maybe{Int} = nothing\n    height::Maybe{Int} = nothing\n    show_grid::Bool = true\n    grid_color::AbstractString = \"lightgrey\"\n    background_color::AbstractString = \"white\"\n    paper_color::AbstractString = \"white\"\nend\n\nGeneric configuration that applies to the whole figure. Each complete AbstractGraphConfiguration contains a figure field of this type.\n\nThe optional width and height are in pixels, that is, 1/96 of an inch. The margins are specified in the same units.\n\nBy default, show_grid is set. It can be used to disable the grid for an even cleaner (but less informative) look. You can also manually change the grid_color, background_color and paper_color.\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Reduced size:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.width = 300\ngraph.configuration.figure.height = 300\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Disable grid:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.show_grid = false\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Change colors:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.grid_color = \"black\"\ngraph.configuration.figure.background_color = \"lightyellow\"\ngraph.configuration.figure.paper_color = \"lightgrey\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.MarginsConfiguration","category":"page"},{"location":"common.html#SomeGraphs.Common.MarginsConfiguration","page":"Common","title":"SomeGraphs.Common.MarginsConfiguration","text":"@kwdef mutable struct MarginsConfiguration <: Validated\n    left::Int = 50\n    bottom::Int = 50\n    right::Int = 50\n    top::Int = 50\nend\n\nConfigure the margins of the graph. Sizes are in pixels (1/96th of an inch). Plotly is uncapable of automatically adjusting the margins to adapt to tick labels, so you may have to tweak this manually to avoid clipping or reduce wasted white space. In the 21st century. Sigh.\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Increased margins:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.figure.margins.left = 100\ngraph.configuration.figure.margins.right = 200\ngraph.configuration.figure.margins.top = 150\ngraph.configuration.figure.margins.bottom = 250\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.AxisConfiguration","category":"page"},{"location":"common.html#SomeGraphs.Common.AxisConfiguration","page":"Common","title":"SomeGraphs.Common.AxisConfiguration","text":"@kwdef mutable struct AxisConfiguration <: Validated\n    minimum::Maybe{Real} = nothing\n    maximum::Maybe{Real} = nothing\n    log_scale::Maybe{LogScale} = nothing\n    log_regularization::Real = 0\n    percent::Bool = false\nend\n\nGeneric configuration for a graph axis. Everything is optional; by default, the minimum and maximum are computed automatically from the data.\n\nIf log_scale is specified, then the log_regularization is added to the coordinate to avoid zero values, and the axis is shown according to the LogScale. Otherwise, log_regularization must be 0.\n\nIf percent is set, then the values are multiplied by 100 and a % suffix is added to the tick labels.\n\nThe minimum/maximum, data values, color palette values etc. are all in the original scale. That is, you should be able to control log scale and/or percent scaling without changing anything else.\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Override range:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.minimum = 1\ngraph.configuration.value_axis.maximum = 4\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Percent:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.percent = 1\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.LogScale","category":"page"},{"location":"common.html#SomeGraphs.Common.LogScale","page":"Common","title":"SomeGraphs.Common.LogScale","text":"Supported log scales (when log scaling is enabled):\n\nLog10Scale converts values to their log (base 10).\nLog2Scale converts values to their log (base 2).\n\n\n\n\n\n","category":"type"},{"location":"common.html","page":"Common","title":"Common","text":"Examples:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Log 2:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.log_scale = Log2Scale\ngraph.configuration.value_axis.log_regularization = 1\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"Log 10:","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_axis.log_scale = Log10Scale\ngraph.configuration.value_axis.log_regularization = 1e-5\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"common.html","page":"Common","title":"Common","text":"SomeGraphs.Common.SizeConfiguration\nSomeGraphs.Common.LineConfiguration\nSomeGraphs.Common.LineStyle\nSomeGraphs.Common.ValuesOrientation\nSomeGraphs.Common.BandsConfiguration\nSomeGraphs.Common.BandConfiguration\nSomeGraphs.Common.BandsData\nSomeGraphs.Common.ColorsConfiguration\nSomeGraphs.Common.ContinuousColors\nSomeGraphs.Common.CategoricalColors\nSomeGraphs.Common.NAMED_COLOR_PALETTES\nSomeGraphs.Common.COLOR_PALETTES_LOCK\nSomeGraphs.Common.SubGraph","category":"page"},{"location":"common.html#SomeGraphs.Common.SizeConfiguration","page":"Common","title":"SomeGraphs.Common.SizeConfiguration","text":"@kwdef mutable struct SizeConfiguration <: Validated\n    smallest::Real = 2\n    span::Real = 8\nend\n\nConfigure the range of sizes in pixels (1/96th of an inch) to map the sizes data By default we use 2 pixels for the smallest size, and add to it an additional span of pixel sizes be 8 to get the largest size. Both the smallest size and span of sizes must be positive.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.LineConfiguration","page":"Common","title":"SomeGraphs.Common.LineConfiguration","text":"@kwdef mutable struct LineConfiguration <: Validated\n    width::Real = 1\n    style::Maybe{LineStyle} = SolidLine\n    is_filled::Bool = false\n    color::Maybe{AbstractString} = nothing\nend\n\nConfigure a line in a graph.\n\nIf style is nothing no line is drawn. If is_filled then the region defined by the line (below it in a lines graph) is filled. A line with no style and no filled is not drawn but can still be used to define a region (e.g., for a BandsConfiguration).\n\nBy default, the color is chosen automatically.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.LineStyle","page":"Common","title":"SomeGraphs.Common.LineStyle","text":"Styles of drawing a line\n\nSolidLine draws a solid line (the default).\nDashLine draws a dashed line.\nDotLine draws a dotted line.\nDashDotLine draws a dash-dotted line.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.ValuesOrientation","page":"Common","title":"SomeGraphs.Common.ValuesOrientation","text":"The orientation of the values axis in a distribution(s) or bars graph:\n\nHorizontalValues - The values are the X axis\n\nVerticalValues - The values are the Y axis (the default).\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.BandsConfiguration","page":"Common","title":"SomeGraphs.Common.BandsConfiguration","text":"@kwdef mutable struct BandsConfiguration <: Validated\n    low::BandConfiguration = BandConfiguration(is_dashed = true)\n    middle::BandConfiguration = BandConfiguration()\n    high::BandConfiguration = BandConfiguration(is_dashed = true)\nend\n\nConfigure the partition of the graph up to three band regions. The low and high bands are for the \"outer\" regions (so their lines are at their border, dashed by default) and the middle band is for the \"inner\" region between them (so its line is inside it, solid by default).\n\nIf show_legend, then a legend showing the bands will be shown.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.BandConfiguration","page":"Common","title":"SomeGraphs.Common.BandConfiguration","text":"@kwdef mutable struct BandConfiguration <: Validated\n    offset::Maybe{Real} = nothing\n    line::LineConfiguration = LineConfiguration()\nend\n\nConfigure a region of the graph defined by some band of values.\n\nThe offset specifies the band's defining line position. We allow up to three bands in a complete BandsConfiguration. A band exists only if its offset is specified, in which case the line specifies how to render its defining line. The low and high bands are defined the region below and above their defining line's offset. If both are defined, the middle band offset defines the center line of the band; the band can still be filled even if this offset is not specified.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.BandsData","page":"Common","title":"SomeGraphs.Common.BandsData","text":"@kwdef mutable struct BandsData\n    low_offset::Maybe{Real} = nothing\n    middle_offset::Maybe{Real} = nothing\n    high_offset::Maybe{Real} = nothing\nend\n\nSpecify data for bands.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.ColorsConfiguration","page":"Common","title":"SomeGraphs.Common.ColorsConfiguration","text":"@kwdef mutable struct ColorsConfiguration <: Validated\n    show_legend::Bool = false\n    color_axis::AxisConfiguration = AxisConfiguration()\n    colors_palette::Maybe{Union{AbstractString, ContinuousColors, CategoricalColors}} = nothing\nend\n\nConfigure how to color some values. The colors_palette is applied; this can be:\n\nThe name of a standard Plotly palette (see NAMED_COLOR_PALETTES);\nA vector of (value, color) tuples for a continuous (numeric value) scale;\nOr a vector of (value, color) for a categorical (string value) scale.\n\nIf show_legend is set, then the colors will be shown (in the legend or as a color bar, as appropriate).\n\nThe color_axis can be used to tweak (continuous) colors. Specifically, the values to be converted to color are modified according to the log_scale and/or percent flags. This is also done to the values specified in an explicit continuous colors pallete.\n\nIn Plotly's API, a color pallete is always specified to cover the values between 0 and 1, and it linearly maps some range of colors to this unit range. You can control the mapping of the values to be colored by using color_axis to modify the values (log_scale, percent) and also specify the specific range of color values to map to the unit range (minimum, maximum).\n\nWhen specifying an explict continuous colors pallete, we must map its lowest value to 0 and the highest value to 1 (and the values must be in non-decreasing order). In this case, there's no point in specifying minimum and maximum in the color_axis, as these are already encoded in the pallete itself.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.ContinuousColors","page":"Common","title":"SomeGraphs.Common.ContinuousColors","text":"A continuous colors palette, mapping numeric values to colors. We also allow specifying tuples instead of pairs to make it easy to invoke the API from other languages such as Python which do not have the concept of a Pair. The legend_title is only used if show_legend is set in the configuration.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.CategoricalColors","page":"Common","title":"SomeGraphs.Common.CategoricalColors","text":"A categorical colors palette, mapping string values to colors. An empty string color means the entity will not be shown.\n\n\n\n\n\n","category":"type"},{"location":"common.html#SomeGraphs.Common.NAMED_COLOR_PALETTES","page":"Common","title":"SomeGraphs.Common.NAMED_COLOR_PALETTES","text":"Builtin color palattes from Plotly, both linear: Blackbody, Bluered, Blues, Cividis, Earth, Electric, Greens, Greys, Hot, Jet, Picnic, Portland, Rainbow, RdBu, Reds, Viridis, YlGnBu, YlOrRd and cyclical: Twilight, IceFire, Edge, Phase, HSV, mrybm, mygbm.\n\nnote: Note\nYou would think we could just give the builtin color palette names to plotly, but it turns out that \"builtin\" in Python plotly doesn't mean \"builtin\" in JavaScript plotly, because \"reasons\". We therefore have to copy their definition here. An upside of having this dictionary is that you are free to insert additional named palettes into and gain the convenience of refering to them by name (e.g., for coloring heatmap annotations).\n\nA _r suffix specifies reversing the order of the pallete.\n\nYou can also append a final _z:<value_fraction>:<color_fraction> suffix to the name. This will map values in the bottom 0..value_fraction of the range to white, and map the rest of the values to the top color_fraction..1 range of the palette. For example, Blues_z:0.3:0.2 will color the bottom 30% of the values in white, and color the top 70% of the values to the top 80% of the Blues pallete.\n\nA _c:<value_fraction>:<color_fraction> works similarly to the _z suffix, except that the fractions are centered on 0.5 (the middle) of the values and color ranges. This is meant to be applied when the values range is +/-Diff, and the pallete has white in the middle. For example RdBu_c:0.3:0.2 will color the 30% of the values near the 0 middle in white, and color the rest of the values using the top and bottom 40% of the RdBu pallete.\n\nAn _o:<value_fraction>:<color> suffix maps the pallete to the range 0..1-value_fraction, and all the values above this to the color, to denote overflow (too high) values. For example, Blues_o:0.01:magenta will color all the values in the bottom 99% of the values range to Blues, and the top 1% of the range to magenta. A _u suffix works similarly but applies to the bottom range of the values.\n\nYou can combine multiple suffixes together, for example Reds_z:0.2:0.2_o:0.99:magenta or RdBu_r_c:0.2:0.2_o:0.01:magenta_u:0.01:darkgreen.\n\nPalletes with suffixes (including _r) are computed on the fly and cached for future use.\n\nnote: Note\nThe implementation of the suffixes uses 1e-6 as a color difference \"too small to matter\". Don't use fractions this small in the prefixes or you will have a bad day.\n\nnote: Note\nAlways hold the COLOR_PALETTES_LOCK when manually accessing the NAMED_COLOR_PALETTES, otherwise you will regret it at some point.\n\n\n\n\n\n","category":"constant"},{"location":"common.html#SomeGraphs.Common.COLOR_PALETTES_LOCK","page":"Common","title":"SomeGraphs.Common.COLOR_PALETTES_LOCK","text":"A global lock to use when accessing the NAMED_COLOR_PALETTES. Always hold the COLOR_PALETTES_LOCK when manually accessing the NAMED_COLOR_PALETTES, otherwise you will regret it at some point.\n\n\n\n\n\n","category":"constant"},{"location":"common.html#SomeGraphs.Common.SubGraph","page":"Common","title":"SomeGraphs.Common.SubGraph","text":"@kwdef struct SubGraph\n    index::Integer\n    overlay::Bool\nend\n\nIdentify one sub-graph out of a set of adjacent graphs. If the index is 1, this is the 1st sub-graph (used top initialize some values such as the legend group title). If overlay then the sub-graphs are plotted on top of each other, which affects axis parameters.\n\n\n\n\n\n","category":"type"},{"location":"common.html#Index","page":"Common","title":"Index","text":"","category":"section"},{"location":"common.html","page":"Common","title":"Common","text":"Pages = [\"common.md\"]","category":"page"},{"location":"distributions.html#Distributions","page":"Distributions","title":"Distributions","text":"","category":"section"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"DocTestSetup = quote\n  using SomeGraphs\n  using PlotlyDocumenter\nend","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions\nSomeGraphs.Distributions.DistributionGraph\nSomeGraphs.Distributions.distribution_graph\nSomeGraphs.Distributions.DistributionGraphData","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions","page":"Distributions","title":"SomeGraphs.Distributions","text":"Graphs for showing probability distributions.\n\n\n\n\n\n","category":"module"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionGraph","page":"Distributions","title":"SomeGraphs.Distributions.DistributionGraph","text":"A graph for visualizing a single distribution. See DistributionGraphData and DistributionGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.distribution_graph","page":"Distributions","title":"SomeGraphs.Distributions.distribution_graph","text":"distribution_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    value_axis_title::Maybe{AbstractString} = nothing,\n    distribution_values::AbstractVector{<:Real} = Float32[],\n    distribution_name::Maybe{AbstractString} = nothing],\n)::DistributionGraph\n\nCreate a DistributionGraph by initializing only the DistributionGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionGraphData","page":"Distributions","title":"SomeGraphs.Distributions.DistributionGraphData","text":"@kwdef mutable struct DistributionGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    distribution_values::AbstractVector{<:Real} = Float32[]\n    distribution_name::Maybe{AbstractString} = nothing\n    distribution_color::Maybe{AbstractString} = nothing\n    value_bands::BandsData = BandsData()\nend\n\nBy default, all the titles are empty. You can specify the overall figure_title as well as the value_axis_title. The optional distribution_name is used as the name of the density axis. You can also specify the distribution_color and/or value_bands offsets here, if they are more of a data than a configuration parameter in the specific graph. This will override whatever is specified in the configuration.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Titles:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.data.figure_title = \"Figure title\"\ngraph.data.value_axis_title = \"Values axis\"\ngraph.data.distribution_name = \"Distribution name\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Color (if it is more of a data than a configuration parameter):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.data.distribution_color = \"red\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionGraphConfiguration\nSomeGraphs.Distributions.DistributionConfiguration","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionGraphConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.DistributionGraphConfiguration","text":"@kwdef mutable struct DistributionGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    distribution::DistributionConfiguration = DistributionConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    value_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing a single distribution.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.DistributionConfiguration","text":"@kwdef mutable struct DistributionConfiguration <: Validated\n    values_orientation::ValuesOrientation = HorizontalValues\n    style::DistributionStyle = CurveDistribution\n    show_outliers::Bool = false\n    color::Maybe{AbstractString} = nothing\nend\n\nConfigure the style of the distribution(s) in a graph.\n\nThe values_orientation will determine the overall orientation of the graph.\n\nIf style uses a box, then if show_outliers, also show the extreme (outlier) points.\n\nThe color is chosen automatically by default. When showing multiple distributions, you can override it per each one in the DistributionsGraphData.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Change orientation:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.values_orientation = VerticalValues\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionStyle","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionStyle","page":"Distributions","title":"SomeGraphs.Distributions.DistributionStyle","text":"Possible styles for visualizing a distribution:\n\nCurveDistribution - a density curve (the default).\n\nViolinDistribution - same as a density curve but mirrored below the values axis.\n\nBoxDistribution - a box with whiskers to show important distribution values.\n\nCurveBoxDistribution - combine a curve and a box.\n\nViolinBoxDistribution - combine a violin and a box.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Violin:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = ViolinDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Box:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = BoxDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Box with outliers:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = BoxDistribution\ngraph.configuration.distribution.show_outliers = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Curve and Box:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = CurveBoxDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Violin and Box:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.style = ViolinBoxDistribution\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Color (if it is more of a configuration parameter than data):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.distribution.color = \"red\"\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Bands (if the offset is more of a configuration parameter than data):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distribution_graph(; distribution_values = [0, 0, 1, 1, 1, 3])\ngraph.configuration.value_bands.middle.offset = 2\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionsGraph\nSomeGraphs.Distributions.distributions_graph\nSomeGraphs.Distributions.DistributionsGraphData","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionsGraph","page":"Distributions","title":"SomeGraphs.Distributions.DistributionsGraph","text":"A graph for visualizing multiple distributions. See DistributionsGraphData and DistributionsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html#SomeGraphs.Distributions.distributions_graph","page":"Distributions","title":"SomeGraphs.Distributions.distributions_graph","text":"distributions_graph(;\n    [figure_title::Maybe{AbstractString} = nothing,\n    value_axis_title::Maybe{AbstractString} = nothing,\n    distributions_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[],\n    distributions_names::Maybe{AbstractVector{<:AbstractString}} = nothing,\n    distributions_colors::Maybe{AbstractVector{<:AbstractString}} = nothing],\n)::DistributionsGraph\n\nCreate a DistributionsGraph by initializing only the DistributionsGraphData fields.\n\n\n\n\n\n","category":"function"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionsGraphData","page":"Distributions","title":"SomeGraphs.Distributions.DistributionsGraphData","text":"@kwdef mutable struct DistributionsGraphData <: AbstractGraphData\n    figure_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    distributions_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    distributions_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    distributions_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\nend\n\nThe data for a multiple distributions graph. By default, all the titles are empty. You can specify the overall figure_title as well as the value_axis_title. If specified, the distributions_names and/or the distributions_colors vectors must contain the same number of elements as the number of vectors in the distributions_values.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Examples:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Default (serves as a baseline to compare with when modifying options):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"SomeGraphs.Distributions.DistributionsGraphConfiguration","category":"page"},{"location":"distributions.html#SomeGraphs.Distributions.DistributionsGraphConfiguration","page":"Distributions","title":"SomeGraphs.Distributions.DistributionsGraphConfiguration","text":"@kwdef mutable struct DistributionsGraphConfiguration <: AbstractGraphConfiguration\n    figure::FigureConfiguration = FigureConfiguration()\n    distribution::DistributionConfiguration = DistributionConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    distributions_gap::Maybe{Real} = 0.05\nend\n\nConfigure a graph for showing multiple distributions.\n\nThis is similar to DistributionGraphConfiguration, with additions to deal with having multiple distributions.\n\nIf distributions_gap is set to nothing, overlay the distributions on top of each other. Otherwise, the distributions are plotted next to each other, with the distributions_gap specified as a fraction of the used graph size. If zero the graphs will be adjacent, if 1 then the gaps will be the same size as the graphs.\n\n\n\n\n\n","category":"type"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Titles:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(;\n    distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]],\n    distributions_names = [\"Foo\", \"Bar\"],\n    figure_title = \"Figure title\",\n    value_axis_title = \"Values title\",\n)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Size of gap between distributions:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\ngraph.configuration.distributions_gap = 1.0\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Overlay the distributions:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\ngraph.configuration.distributions_gap = nothing\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Overlay the distributions with a legend:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(;\n    distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]],\n    distributions_names = [\"Foo\", \"Bar\"],\n)\ngraph.configuration.distributions_gap = nothing\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Colors (if they are part of the data):","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(;\n    distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]],\n    distributions_colors = [\"red\", \"green\"],\n)\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"You can also apply any of the distribution and/or value axis configuration options; these will apply to all the distributions:","category":"page"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"using SomeGraphs\ngraph = distributions_graph(; distributions_values = [[0, 0, 1, 1, 1, 3], [4, 4, 3, 3, 3, 1]])\ngraph.configuration.distribution.values_orientation = VerticalValues\ngraph.configuration.distribution.color = \"red\"\ngraph.configuration.distribution.style = BoxDistribution\ngraph.configuration.distribution.show_outliers = true\nusing PlotlyDocumenter\nto_documenter(graph.figure)","category":"page"},{"location":"distributions.html#Index","page":"Distributions","title":"Index","text":"","category":"section"},{"location":"distributions.html","page":"Distributions","title":"Distributions","text":"Pages = [\"distributions.md\"]","category":"page"},{"location":"utilities.html#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities.html","page":"Utilities","title":"Utilities","text":"SomeGraphs.Utilities\nSomeGraphs.Utilities.Maybe\nSomeGraphs.Utilities.validate_graph\nSomeGraphs.Utilities.final_scaled_range\nSomeGraphs.Utilities.patch_layout!\nSomeGraphs.Utilities.graph_to_figure\nSomeGraphs.Utilities.plotly_figure\nSomeGraphs.Utilities.axis_ticks_prefix\nSomeGraphs.Utilities.axis_ticks_suffix\nSomeGraphs.Utilities.scale_axis_value\nSomeGraphs.Utilities.scale_axis_values\nSomeGraphs.Utilities.scale_size_values\nSomeGraphs.Utilities.push_horizontal_bands_shapes\nSomeGraphs.Utilities.push_vertical_bands_shapes\nSomeGraphs.Utilities.push_diagonal_bands_shapes\nSomeGraphs.Utilities.validate_graph_bands\nSomeGraphs.Utilities.range_of\nSomeGraphs.Utilities.expand_range!\nSomeGraphs.Utilities.prefer_data","category":"page"},{"location":"utilities.html#SomeGraphs.Utilities","page":"Utilities","title":"SomeGraphs.Utilities","text":"Utility functions for defining graph types. We do not re-export all symbols from this sub-module to the global MCGraphs namespace. You can safely ignore these unless you are implementing a new graph type.\n\n\n\n\n\n","category":"module"},{"location":"utilities.html#SomeGraphs.Validations.Maybe","page":"Utilities","title":"SomeGraphs.Validations.Maybe","text":"Maybe{T} = Union{T, Nothing}\n\nThe type to use when maybe there is a value, maybe there isn't. This is exactly as if writing the explicit Union with Nothing but is shorter and more readable. This is extremely common.\n\nnote: Note\nThis is replicated from DataAxesFormats to avoid making it a dependency. We do not export it but use it extensively in the type signatures.\n\n\n\n\n\n","category":"type"},{"location":"utilities.html#SomeGraphs.Common.validate_graph","page":"Utilities","title":"SomeGraphs.Common.validate_graph","text":"validate_graph(::Graph)::Maybe{AbstractString}\n\nValidate that the combination of data and configuration in a graph is valid, after validating each one separately. This isn't invoked manually, instead it is called by the overall validate of the graph. It is provided (with a default empty implementation) to allow for type-specific validations.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.final_scaled_range","page":"Utilities","title":"SomeGraphs.Utilities.final_scaled_range","text":"final_scaled_range(\n    implicit_scaled_range::AbstractVector{<:Maybe{Real}},\n    axis_configuration::AxisConfiguration\n)::AbstractVector{<:Real}\n\nCompute the final range for some axis given the implicit_scaled_range computed from the values and the axis_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.patch_layout!","page":"Utilities","title":"SomeGraphs.Utilities.patch_layout!","text":"patch_layout!(figure_configuration::FigureConfiguration, layout::Layout)::Layout\n\nPatch a Plotly layout using the figure_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Common.graph_to_figure","page":"Utilities","title":"SomeGraphs.Common.graph_to_figure","text":"graph_to_figure(graph::Graph)::PlotlyFigure\n\nRender a graph given its data and configuration. Technically this just converts the graph to a PlotlyFigure which Julia knows how display for us, rather than actually display the graph. The implementation depends on the specific graph type.\n\nYou can just write graph.figure instead of graph_to_figure(graph).\n\nnote: Note\nWhen saving a figure to a file, Plotly in its infinite wisdom ignores the graph width and height specified inside the figure, (except for saving HTML file). You should therefore use save_graph rather than call savefig on the result of graph_to_figure.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.plotly_figure","page":"Utilities","title":"SomeGraphs.Utilities.plotly_figure","text":"plotly_figure(trace::GenericTrace, layout::Layout)::PlotlyFigure\nplotly_figure(traces::AbstractVector{<:GenericTrace}, layout::Layout)::PlotlyFigure\n\nWrap a trace or a set of traces with the accompanying layout in a PlotlyFigure.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.axis_ticks_prefix","page":"Utilities","title":"SomeGraphs.Utilities.axis_ticks_prefix","text":"axis_ticks_prefix(axis_configuration::AxisConfiguration)::Maybe{AbstractString}\n\nGiven the axis_configuration, return a prefix for the ticks along that axis. This deals with log scales.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.axis_ticks_suffix","page":"Utilities","title":"SomeGraphs.Utilities.axis_ticks_suffix","text":"axis_ticks_suffix(axis_configuration::AxisConfiguration)::Maybe{AbstractString}\n\nGiven the axis_configuration, return a suffix for the ticks along that axis. This deals with percent scaling.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.scale_axis_value","page":"Utilities","title":"SomeGraphs.Utilities.scale_axis_value","text":"scale_axis_value(axis_configuration::AxisConfiguration, value::Real)::Real\nscale_axis_value(axis_configuration::AxisConfiguration, value::Nothing)::Nothing\n\nScale a single value according to the axis_configuration. This deals with log scales and percent scaling.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.scale_axis_values","page":"Utilities","title":"SomeGraphs.Utilities.scale_axis_values","text":"scale_axis_values(\n    axis_configuration::AxisConfiguration,\n    values::Maybe{AbstractVector{<:Maybe{Real}}},\n)::Maybe{AbstractVector{<:Maybe{Real}}}\n\nScale a vector of values according to the axis_configuration. This deals with log scales and percent scaling, as well as clamping the values to the allowed range.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.scale_size_values","page":"Utilities","title":"SomeGraphs.Utilities.scale_size_values","text":"scale_size_values(\n    axis_configuration::AxisConfiguration,\n    size_configuration::SizeConfiguration,\n    values::Maybe{AbstractVector{<:Real}},\n)::Maybe{AbstractVector{<:Real}}\n\nScale a vector of values according to the axis_configuration and size_configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.push_horizontal_bands_shapes","page":"Utilities","title":"SomeGraphs.Utilities.push_horizontal_bands_shapes","text":"push_horizontal_bands_shapes(\n    shapes::AbstractVector{Shape},\n    axis_configuration::AxisConfiguration,\n    scaled_values_range::AbstractVector{<:Real},\n    bands_data::BandsData,\n    bands_configuration::BandsConfiguration\n)::AbstractVector{<:Shape}\n\nPush shapes for plotting horizontal bands. These shapes need to be placed in the layout and not the traces because Plotly.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.push_vertical_bands_shapes","page":"Utilities","title":"SomeGraphs.Utilities.push_vertical_bands_shapes","text":"push_vertical_bands_shapes(\n    shapes::AbstractVector{Shape},\n    axis_configuration::AxisConfiguration,\n    scaled_values_range::AbstractVector{<:Real},\n    bands_data::BandsData,\n    bands_configuration::BandsConfiguration\n)::AbstractVector{<:Shape}\n\nPush shapes for plotting vertical bands. These shapes need to be places in the layout and not the traces because Plotly.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.push_diagonal_bands_shapes","page":"Utilities","title":"SomeGraphs.Utilities.push_diagonal_bands_shapes","text":"push_diagonal_bands_shapes(\n    shapes::AbstractVector{Shape},\n    x_axis_configuration::AxisConfiguration,\n    y_axis_configuration::AxisConfiguration,\n    x_scaled_values_range::AbstractVector{<:Real},\n    y_scaled_values_range::AbstractVector{<:Real},\n    bands_data::BandsData,\n    bands_configuration::BandsConfiguration\n)::AbstractVector{<:Shape}\n\nPush shapes for plotting diagonal bands. These shapes need to be placed in the layout and not the traces because Plotly.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.validate_graph_bands","page":"Utilities","title":"SomeGraphs.Utilities.validate_graph_bands","text":"validate_graph_bands(\n    field::AbstractString,\n    bands_configuration::BandsConfiguration,\n    bands_data::BandsData,\n    axis_configuration::AxisConfiguration,\n)::Nothing\n\nValidate that the bands configuration and data is compatible. Assumes these are specified as the same field in both the graph's data and configuration.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.range_of","page":"Utilities","title":"SomeGraphs.Utilities.range_of","text":"range_of(\n    values::AbstractVector{<:Maybe{Real}},\n    range::Maybe{AbstractVector{<:Maybe{Real}}} = nothing,\n)::AbstractVector{<:Maybe{Real}}\n\nCompute the range of (scaled) values. If a range is give, it is updated in-place as well.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.expand_range!","page":"Utilities","title":"SomeGraphs.Utilities.expand_range!","text":"expand_range!(range::Maybe{AbstractVector{<:Maybe{Real}}})::Nothing\n\nExpand the range of values by 1% to allow for points and lines at the edge to be fully visible.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#SomeGraphs.Utilities.prefer_data","page":"Utilities","title":"SomeGraphs.Utilities.prefer_data","text":"prefer_data(data_value::Any, configuration_value::Any)::Any\nprefer_data(data_values::AbstractVector, index::Integer, configuration_value::Any)::Any\n\nReturn a value to use, prefering the data value (which may be in a vector) to the configuration value.\n\n\n\n\n\n","category":"function"},{"location":"utilities.html#Index","page":"Utilities","title":"Index","text":"","category":"section"},{"location":"utilities.html","page":"Utilities","title":"Utilities","text":"Pages = [\"utilities.md\"]","category":"page"},{"location":"validations.html#Validations","page":"Validations","title":"Validations","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"SomeGraphs.Validations\nSomeGraphs.Validations.Validated\nSomeGraphs.Validations.ValidationContext\nSomeGraphs.Validations.location\nSomeGraphs.Validations.validate\nSomeGraphs.Validations.validate_in\nSomeGraphs.Validations.validate_field\nSomeGraphs.Validations.validate_is_at_least\nSomeGraphs.Validations.validate_is_above\nSomeGraphs.Validations.validate_is_at_most\nSomeGraphs.Validations.validate_is_below\nSomeGraphs.Validations.validate_is_range\nSomeGraphs.Validations.validate_is_color\nSomeGraphs.Validations.validate_vector_is_not_empty\nSomeGraphs.Validations.validate_vector_length\nSomeGraphs.Validations.validate_vector_entries\nSomeGraphs.Validations.validate_matrix_is_not_empty\nSomeGraphs.Validations.validate_matrix_size\nSomeGraphs.Validations.validate_matrix_entries\nSomeGraphs.Validations.validate_dict_is_not_empty\nSomeGraphs.Validations.validate_dict_entries","category":"page"},{"location":"validations.html#SomeGraphs.Validations","page":"Validations","title":"SomeGraphs.Validations","text":"Validate graph data.\n\nRendering graphs requires two objects: data and configuration. Both objects need to be internally consistent, as does their combination. This is especially relevant for the graph configuration. When creating UI for filling in these objects, we can do limited validation of each field on its own based on its type (e.g. (e.g., ensure that a \"color\" field contains a valid color name). Some restrictions, however, are not easily deduced from the field type, or relate different fields to each other. Replicating all the restrictions in the UI is tedious and error prone.\n\nWe therefore provide a framework here for validating the objects and generate a hopefully informative error message if anything is wrong. This can be used by the UI to validate the data without worrying about the details.\n\n\n\n\n\n","category":"module"},{"location":"validations.html#SomeGraphs.Validations.Validated","page":"Validations","title":"SomeGraphs.Validations.Validated","text":"A common type for objects that support validation, that is, that one can invoke validate on.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.ValidationContext","page":"Validations","title":"SomeGraphs.Validations.ValidationContext","text":"A context (path of field names and/or indices) leading to a validated value. A string indicates access of a data member, an integer indicates accessing a vector or matrix element.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#SomeGraphs.Validations.location","page":"Validations","title":"SomeGraphs.Validations.location","text":"stringify_context(context::ValidationContext)::AbstractString\n\nConvert a ValidationContext to a string for error messages.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate","page":"Validations","title":"SomeGraphs.Validations.validate","text":"validate(context::ValidationContext, value::Validated)::Nothing end\nvalidate(context::ValidationContext, value::Validated, extra::Any)::Nothing end\nvalidate(context::ValidationContext, value::Validated, extra::Any, another::Any)::Nothing end\n\nValidate the value which was accessed via the context, possibly using some extra informative. Will throw ArgumentError if the value isn't valid.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_in","page":"Validations","title":"SomeGraphs.Validations.validate_in","text":"validate_in(validation::Function, context::ValidationContext, where::Union{AbstractString, Integer})::Nothing\n\nInvoke the validation function with the context updated to include some where.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_field","page":"Validations","title":"SomeGraphs.Validations.validate_field","text":"validate_field(context::ValidationContext, field::AbstractString, value::Validated)::Nothing\nvalidate_field(context::ValidationContext, field::AbstractString, value::Validated, extra::Any)::Nothing\nvalidate_field(context::ValidationContext, field::AbstractString, value::Validated, extra::Any, another::Any)::Nothing\n\nValidate the value of a field.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_at_least","page":"Validations","title":"SomeGraphs.Validations.validate_is_at_least","text":"validate_is_at_least(context::ValidationContext, value::Maybe{Real}, minimum::Real)::Nothing\n\nValidate that a value is at least some minimum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_above","page":"Validations","title":"SomeGraphs.Validations.validate_is_above","text":"validate_is_above(context::ValidationContext, value::Maybe{Real}, minimum::Real)::Nothing\n\nValidate that a value is above some minimum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_at_most","page":"Validations","title":"SomeGraphs.Validations.validate_is_at_most","text":"validate_is_at_most(context::ValidationContext, value::Maybe{Real}, maximum::Real)::Nothing\n\nValidate that a value is at most some maximum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_below","page":"Validations","title":"SomeGraphs.Validations.validate_is_below","text":"validate_is_below(context::ValidationContext, value::Maybe{Real}, maximum::Real)::Nothing\n\nValidate that a value is below some maximum (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_range","page":"Validations","title":"SomeGraphs.Validations.validate_is_range","text":"validate_is_range(\n    context::ValidationContext,\n    low_where::AbstractString,\n    low_value::Maybe{Real},\n    high_where::AbstractString,\n    high_value::Maybe{Real},\n)::Nothing\n\nValidate that if both low_value and high_value are specified, they define a non-empty range.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_is_color","page":"Validations","title":"SomeGraphs.Validations.validate_is_color","text":"validate_is_color(context::ValidationContext, color::Maybe{AbstractString})::Nothing\n\nValidate that a color is a valid color name (if it is specified).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_is_not_empty","page":"Validations","title":"SomeGraphs.Validations.validate_vector_is_not_empty","text":"validate_vector_is_not_empty(\n    context::ValidationContext,\n    [field::AbstractString,]\n    vector::AbstractVector\n)::Nothing\n\nValidate that a field containing a vector has at least one entry.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_length","page":"Validations","title":"SomeGraphs.Validations.validate_vector_length","text":"validate_vector_length(\n    context::ValidationContext,\n    field::AbstractString,\n    vector::Maybe{AbstractVector},\n    expected_base::AbstractString,\n    expected_length::Integer\n)::Nothing\n\nValidate that a field containing a vector has (if it is specified) the expected_length of an expected_base field.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_vector_entries","page":"Validations","title":"SomeGraphs.Validations.validate_vector_entries","text":"validate_vector_entries(\n    validation::Function,\n    context::ValidationContext,\n    [field::AbstractString,]\n    vector::Maybe{AbstractVector}\n)::Nothing\n\nValidate all the entries of a field containing a vector using the validation function. It is given the entry's index, and its value. The context is updated to include the index for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_is_not_empty","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_is_not_empty","text":"validate_matrix_is_not_empty(\n    context::ValidationContext,\n    field::AbstractString,\n    matrix::AbstractMatrix\n)::Nothing\n\nValidate that a field containing a matrix has at least one entry.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_size","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_size","text":"validate_matrix_size(\n    context::ValidationContext,\n    matrix::Maybe{AbstractMatrix},\n    field::AbstractString,\n    expected_size::Tuple{Integer, Integer}\n)::Nothing\n\nValidate that a field containing matrix has (if it is specified) the expected_size of a base_field.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_matrix_entries","page":"Validations","title":"SomeGraphs.Validations.validate_matrix_entries","text":"validate_matrix_entries(\n    validation::Function,\n    context::ValidationContext,\n    field::AbstractString,\n    matrix::Maybe{AbstractMatrix}\n)::Nothing\n\nValidate all the entries of a field containing a matrix using the validation function. It is given the entry's row and column indices, and its value. The context is updated to include the indices for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_dict_is_not_empty","page":"Validations","title":"SomeGraphs.Validations.validate_dict_is_not_empty","text":"validate_dict_is_not_empty(\n    context::ValidationContext,\n    [field::AbstractString,]\n    dict::AbstractDict,\n)::Nothing\n\nValidate that a field containing a dict has at least one entry.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#SomeGraphs.Validations.validate_dict_entries","page":"Validations","title":"SomeGraphs.Validations.validate_dict_entries","text":"validate_dict_entries(\n    validation::Function,\n    context::ValidationContext,\n    [field::AbstractString,]\n    dict::Maybe{AbstractDict}\n)::Nothing\n\nValidate all the entries of a field containing a dict using the validation function. It is given the entry's key and value. The context is updated to include the key for the duration of the function.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#Index","page":"Validations","title":"Index","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"Pages = [\"validations.md\"]","category":"page"},{"location":"index.html#SomeGraphs","page":"SomeGraphs","title":"SomeGraphs","text":"","category":"section"},{"location":"index.html","page":"SomeGraphs","title":"SomeGraphs","text":"SomeGraphs.SomeGraphs","category":"page"},{"location":"index.html#SomeGraphs.SomeGraphs","page":"SomeGraphs","title":"SomeGraphs.SomeGraphs","text":"Wrappers around Plotly to generate some types of graphs.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Index","page":"SomeGraphs","title":"Index","text":"","category":"section"},{"location":"index.html","page":"SomeGraphs","title":"SomeGraphs","text":"","category":"page"}]
}
